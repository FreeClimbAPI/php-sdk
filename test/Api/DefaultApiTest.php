<?php
/**
 * DefaultApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace FreeClimb\Api\Test\Api;

use FreeClimb\Api\Model\CallStatus;
use FreeClimb\Api\Model\MessageDirection;
use FreeClimb\Api\Model\PlayBeep;
use FreeClimb\Api\Model\UpdateCallRequestStatus;
use FreeClimb\Api\Model\UpdateConferenceRequestStatus;
use \stdClass;
use FreeClimb\Api\Api\DefaultApi;
use \FreeClimb\Api\Configuration;
use \FreeClimb\Api\ApiException;
use \FreeClimb\Api\ObjectSerializer;
use PHPUnit\Framework\TestCase;

use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Exception\RequestException;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{

    protected $client;
    protected $apiInstance;
    protected $config;
    public function buy_incoming_number_request_buyAPhoneNumber_test_value():\FreeClimb\Api\Model\BuyIncomingNumberRequest{
        return new \FreeClimb\Api\Model\BuyIncomingNumberRequest(array(
            "phone_number" => "phoneNumber_example",
            "alias"=> "alias_example",
            "application_id"=>"applicationId_example"
        )); 
    } 

    public function create_conference_request_createAConference_test_value():\FreeClimb\Api\Model\CreateConferenceRequest{
        return new \FreeClimb\Api\Model\CreateConferenceRequest(array(
        "alias"=> "alias_example",
        "play_beep" => PlayBeep::ALWAYS,
        "record"=> true,
        "wait_url"=> "waitUrl_example",
        "status_callback_url"=>"statusCallbackUrl_example"
        )); 
    } 

    public function queue_request_createAQueue_test_value():\FreeClimb\Api\Model\QueueRequest{
        return new \FreeClimb\Api\Model\QueueRequest(
        array(
            "alias"=> "alias_example",
            "max_size"=> 0
        )
    );
    } 

    public function application_request_createAnApplication_test_value():\FreeClimb\Api\Model\ApplicationRequest{
        return new \FreeClimb\Api\Model\ApplicationRequest(array(
        "alias"=> "alias_example",
        "voice_url"=> "voiceUrl_example",
        "voice_fallback_url"=> "voiceFallbackUrl_example",
        "call_connect_url"=> "voiceUrl_example",
        "status_callback_url"=>"statusCallbackUrl_example",
        "sms_url"=> "smsUrl_example",
        "sms_fallback_url"=> "smsFallbackUrl_example"
    ));
    } 
    
    public function recording_id_deleteARecording_test_value():string{
        return 'recording_id_example';
    } 
    public function application_id_deleteAnApplication_test_value():string{
        return 'application_id_example';
    } 
    public function phone_number_id_deleteAnIncomingNumber_test_value():string{
        return 'phone_number_id_example';
    } 
    public function queue_id_dequeueAMember_test_value():string{
        return 'queue_id_example';
    } 
    public function call_id_dequeueAMember_test_value():string{
        return 'call_id_example';
    } 
    public function queue_id_dequeueHeadMember_test_value():string{
        return 'queue_id_example';
    } 
    public function recording_id_downloadARecordingFile_test_value():string{
        return 'recording_id_example';
    }
    public function filter_logs_request_filterLogs_test_value():\FreeClimb\Api\Model\FilterLogsRequest{
        return new \FreeClimb\Api\Model\FilterLogsRequest(array(
        'pql'=>'pqlExample'
    ));
    } 
    public function call_id_getACall_test_value():string{
        return 'call_id_example';
    } 
    public function conference_id_getAConference_test_value():string{
        return 'conference_id_example';
    }
    public function queue_id_getAMember_test_value():string{
        return 'queue_id_example';
    }
    public function call_id_getAMember_test_value():string{
        return 'call_id_example';
    }
    public function conference_id_getAParticipant_test_value():string{
        return 'conference_id_example';
    }
    public function call_id_getAParticipant_test_value():string{
        return 'call_id_example';
    }
    public function queue_id_getAQueue_test_value():string{
        return 'queue_id_example';
    }
    public function recording_id_getARecording_test_value():string{
        return 'recording_id_example';
    }
    public function application_id_getAnApplication_test_value():string{
        return 'application_id_example';
    }
    public function phone_number_id_getAnIncomingNumber_test_value():string{
        return 'phone_number_id_example';
    }
    public function message_id_getAnSmsMessage_test_value():string{
        return 'message_id_example'; 
    }
    public function queue_id_getHeadMember_test_value():string{
        return 'queue_id_example';
    }
    public function alias_listActiveQueues_test_value():string{
        return 'alias_example';
    }
    public function alias_listApplications_test_value():string{
        return 'alias_example';
    }
    public function phone_number_listAvailableNumbers_test_value():string{
        return 'phone_number_example';
    }
    public function region_listAvailableNumbers_test_value():string{
        return 'region_example';
    }
    public function country_listAvailableNumbers_test_value():string{
        return 'country_example';
    }
    public function voice_enabled_listAvailableNumbers_test_value():string{

        return "true";
    }
    public function sms_enabled_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function capabilities_voice_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function capabilities_sms_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function capabilities_toll_free_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function capabilities_ten_dlc_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function capabilities_short_code_listAvailableNumbers_test_value():string{
        return "true";
    }
    public function call_id_listCallLogs_test_value():string{
        return 'call_id_example';
    }
    public function call_id_listCallRecordings_test_value():string{
        return 'call_id_example';
    }
    public function date_created_listCallRecordings_test_value():string{
        return 'date_created_example';
    } 
    public function active_listCalls_test_value():string{
        return "false";
    }
    public function to_listCalls_test_value():string{
        return 'to_example';
    }
    public function from_listCalls_test_value():string{
        return 'from_example';
    }
    public function status_listCalls_test_value():string{
        return CallStatus::COMPLETED;
    }
    public function start_time_listCalls_test_value():string{
        return 'start_time_example';
    }
    public function end_time_listCalls_test_value():string{
        return 'end_time_example';
    }
    public function parent_call_id_listCalls_test_value():string{
        return 'parent_call_id_example';
    }
    public function application_id_listCalls_test_value():array{
        return array('AP0123456789ABCDEFabcedf000000000000000001', 'AP0123456789ABCDEFabcedf000000000000000002', "AP0123456789ABCDEFabcedf000000000000000003");
    }
    public function status_listConferences_test_value():string{
        return 'status_example';
    }
    public function alias_listConferences_test_value():string{
        return 'alias_example';
    }
    public function date_created_listConferences_test_value():string{
        return 'date_created_example';
    }
    public function date_updated_listConferences_test_value():string{
        return 'date_updated_example';
    }
    
    public function phone_number_listIncomingNumbers_test_value():string{
        return 'phone_number_example';
    }
    public function alias_listIncomingNumbers_test_value():string{
        return 'alias_example';
    }
    public function region_listIncomingNumbers_test_value():string{
        return 'region_example';
    }
    public function country_listIncomingNumbers_test_value():string{
        return 'country_example';
    }
    public function application_id_listIncomingNumbers_test_value():string{
        return 'application_id_example';
    }
    public function has_application_listIncomingNumbers_test_value():string{
        return "false";
    }
    public function voice_enabled_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function sms_enabled_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function capabilities_voice_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function capabilities_sms_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function capabilities_toll_free_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function capabilities_ten_dlc_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function capabilities_short_code_listIncomingNumbers_test_value():string{
        return "true";
    }
    public function queue_id_listMembers_test_value():string{
        return 'queue_id_example';
    }
    public function conference_id_listParticipants_test_value():string{
        return 'conference_id_example';
    }
    public function talk_listParticipants_test_value():string{
        return "true";
    }
    public function listen_listParticipants_test_value():string{
        return "true";
    }
    public function to_listSmsMessages_test_value():string{
        return 'to_example';
    }
    public function from_listSmsMessages_test_value():string{
        return 'from_example';
    }
    public function begin_time_listSmsMessages_test_value():string{
        return 'begin_time_example';
    } 
    public function end_time_listSmsMessages_test_value():string{
        return 'end_time_example';
    }
    public function direction_listSmsMessages_test_value():string{
        return MessageDirection::INBOUND;
    }
    public function conference_id_removeAParticipant_test_value():string{
        return 'conference_id_example';
    }
    public function call_id_removeAParticipant_test_value():string{
        return 'call_id_example';
    }
    public function recording_id_streamARecordingFile_test_value():string{
        return 'recording_id_example';
    }
    public function conference_id_updateAConference_test_value():string{
        return 'conference_id_example';
    }
    public function call_id_updateALiveCall_test_value():string{
        return 'call_id_example';
    } 
    public function conference_id_updateAParticipant_test_value():string{
        return 'conference_id_example';
    }
    public function call_id_updateAParticipant_test_value():string{
        return 'call_id_example';
    }
    public function queue_id_updateAQueue_test_value():string{
        return 'queue_id_example';
    }
    public function application_id_updateAnApplication_test_value():string{
        return 'application_id_example';
    }
    public function phone_number_id_updateAnIncomingNumber_test_value():string{
        return 'phone_number_id_example';
    }
    public function offnet_listIncomingNumbers_test_value():string {
        return "true";
    }
    public function call_id_listRecordings_test_value():string {
        return 'call_id_example';
    }
    public function conference_id_listRecordings_test_value():string {
        return 'conference_id_example';
    }
    public function date_created_listRecordings_test_value():string {
        return 'date_created_example';
    }
    public function brand_id_getTenDLCSmsCampaigns_test_value(): string{
        return "BX56XX4";
    }
    public function brand_id_getTenDLCSmsPartnerCampaigns_test_value(): string{
        return "BX56XX4";
    }
    public function brand_id_getTenDLCSmsBrand_test_value(): string{
        return "BX56XX4";
    }
    public function campaign_id_getTenDLCSmsCampaign_test_value(): string{
        return "CX56XX4";
    }
    public function campaign_id_getTenDLCSmsPartnerCampaign_test_value(): string{
        return "CX56XX4";
    }
    public function has_campaign_listIncomingNumbers_test_value():string {
        return "true";
    }
    public function campaign_id_listSmsMessages_test_value(): string {
        return "BX56XX4";
    }
    public function brand_id_listSmsMessages_test_value(): string{
        return "BX56XX4";
    }
    public function is10_dlc_listSmsMessages_test_value(): string{
        return "true";
    }
    public function queue_request_updateAQueue_test_value():\FreeClimb\Api\Model\QueueRequest{
        return new \FreeClimb\Api\Model\QueueRequest(
        array(
            "alias"=> "alias_example",
            "max_size"=> 0
        )
    );
    }
    public function application_request_updateAnApplication_test_value():\FreeClimb\Api\Model\ApplicationRequest{
        return new \FreeClimb\Api\Model\ApplicationRequest(array(
        "alias"=> "alias_example",
        "voice_url"=> "voiceUrl_example",
        "voice_fallback_url"=> "voiceFallbackUrl_example",
        "call_connect_url"=> "voiceUrl_example",
        "status_callback_url"=>"statusCallbackUrl_example",
        "sms_url"=> "smsUrl_example",
        "sms_fallback_url"=> "smsFallbackUrl_example"
    ));
    }
    public function make_call_request_makeACall_test_value():\FreeClimb\Api\Model\MakeCallRequest{
        return new \FreeClimb\Api\Model\MakeCallRequest(array(
        "from"=>"from_example",
        "to"=>"to_example",
        "application_id"=>"applicationId_example",
        "send_digits"=>"sendDigits_example",
        "if_machine"=>"ifMachine_example",
        "if_machine_url"=>"ifMachineUrl_example",
        "timeout"=>10,
        "parent_call_id"=>"parentCallId_example",
        "privacy_mode"=>false,
        "call_connect_url"=>"callConnectUrl_example"
    ));
    }
    public function message_request_sendAnSmsMessage_test_value():\FreeClimb\Api\Model\MessageRequest{
        return new \FreeClimb\Api\Model\MessageRequest(array(
        "uri"=> "uri_example",
        "date_created"=> "dateCreated_example",
        "date_updated"=> "dateUpdated_example",
        "revision"=> 0,
        "from"=>"from_example",
        "to"=> "to_example",
        "text"=> "text_example",
        "notification_url"=> "notificationUrl_example",
        "account_id"=> "accountId_example"
    ));
    }

    public function update_conference_request_updateAConference_test_value():\FreeClimb\Api\Model\UpdateConferenceRequest{
        return new \FreeClimb\Api\Model\UpdateConferenceRequest(array(
        "alias"=>"from_example",
        "play_beep"=>PlayBeep::ALWAYS,
        "status"=>UpdateConferenceRequestStatus::EMPTY,
    ));
    } 

    public function update_call_request_updateALiveCall_test_value():\FreeClimb\Api\Model\UpdateCallRequest{
        return new \FreeClimb\Api\Model\UpdateCallRequest(array(
        "status"=>UpdateCallRequestStatus::COMPLETED
    ));
    }

    public function update_conference_participant_request_updateAParticipant_test_value():\FreeClimb\Api\Model\UpdateConferenceParticipantRequest{
        return new \FreeClimb\Api\Model\UpdateConferenceParticipantRequest(array(
        "talk"=>true,
        "listen"=>true,
    ));
    }

    public function account_request_updateAnAccount_test_value():\FreeClimb\Api\Model\AccountRequest{
        return new \FreeClimb\Api\Model\AccountRequest(array(
        "alias"=>"alias_example",
        "label"=>"label_example",
    ));
    } 

    public function incoming_number_request_updateAnIncomingNumber_test_value():\FreeClimb\Api\Model\IncomingNumberRequest{
        return new \FreeClimb\Api\Model\IncomingNumberRequest(array(
        "application_id" => "applicationId_example",
        "alias"=> "alias_example"
        ));
    }

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    { 
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }
    /**
     * Test case for buyAPhoneNumber
     *
     * Buy a Phone Number.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\BuyIncomingNumberRequest $buy_incoming_number_request Incoming Number transaction details (required)
     */
    public function testBuyAPhoneNumber()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$buy_incoming_number_request = $buy_incoming_number_request_test_value;
        
        $response = $apiInstance->buyAPhoneNumber($this->buy_incoming_number_request_buyAPhoneNumber_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult',$response);
    }
    /**
     * Test case for createAConference
     *
     * Create a Conference.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\CreateConferenceRequest $create_conference_request Conference to create (optional)
     */
    public function testCreateAConference()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$create_conference_request = $create_conference_request_test_value;
        
        $response = $apiInstance->createAConference($this->create_conference_request_createAConference_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceResult',$response);
    }
    /**
     * Test case for createAQueue
     *
     * Create a Queue.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\QueueRequest $queue_request Queue details used to create a queue (optional)
     */
    public function testCreateAQueue()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_request = $queue_request_test_value;
        
        $response = $apiInstance->createAQueue($this->queue_request_createAQueue_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult',$response);
    }
    /**
     * Test case for createAnApplication
     *
     * Create an application.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\ApplicationRequest $application_request Application Details (optional)
     */
    public function testCreateAnApplication()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$application_request = $application_request_test_value;
        
        $response = $apiInstance->createAnApplication($this->application_request_createAnApplication_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult',$response);
    }
    /**
     * Test case for deleteARecording
     *
     * Delete a Recording.
     * @param  string $account_id ID of the account (required)
     * @param  string $recording_id String that uniquely identifies this recording resource. (required)
     */
    public function testDeleteARecording()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$recording_id = $recording_id_test_value;
        
        $response = $apiInstance->deleteARecording($this->recording_id_deleteARecording_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for deleteAnApplication
     *
     * Delete an application.
     * @param  string $account_id ID of the account (required)
     * @param  string $application_id String that uniquely identifies this application resource. (required)
     */
    public function testDeleteAnApplication()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$application_id = $application_id_test_value;
        
        $response = $apiInstance->deleteAnApplication($this->application_id_deleteAnApplication_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for deleteAnIncomingNumber
     *
     * Delete an Incoming Number.
     * @param  string $account_id ID of the account (required)
     * @param  string $phone_number_id String that uniquely identifies this phone number resource. (required)
     */
    public function testDeleteAnIncomingNumber()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$phone_number_id = $phone_number_id_test_value;
        
        $response = $apiInstance->deleteAnIncomingNumber($this->phone_number_id_deleteAnIncomingNumber_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for dequeueAMember
     *
     * Dequeue a Member.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id String that uniquely identifies the Queue that the Member belongs to. (required)
     * @param  string $call_id ID if the Call that the Member belongs to (required)
     */
    public function testDequeueAMember()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->dequeueAMember($this->queue_id_dequeueAMember_test_value(), $this->call_id_dequeueAMember_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember',$response);
    }
    /**
     * Test case for dequeueHeadMember
     *
     * Dequeue Head Member.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id String that uniquely identifies this queue resource. (required)
     */
    public function testDequeueHeadMember()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        
        $response = $apiInstance->dequeueHeadMember($this->queue_id_dequeueHeadMember_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember',$response);
    }
    /**
     * Test case for downloadARecordingFile
     *
     * Download a Recording File.
     * @param  string $account_id ID of the account (required)
     * @param  string $recording_id String that uniquely identifies this recording resource. (required)
     */
    public function testDownloadARecordingFile()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$recording_id = $recording_id_test_value;
        
        $response = $apiInstance->downloadARecordingFile($this->recording_id_downloadARecordingFile_test_value());
        
        
        $this->assertInstanceOf('\SplFileObject',$response);
    }
    /**
     * Test case for filterLogs
     *
     * Filter Logs.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\FilterLogsRequest $filter_logs_request Filter logs request paramters (required)
     */
    public function testFilterLogs()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$filter_logs_request = $filter_logs_request_test_value;
        
        $response = $apiInstance->filterLogs($this->filter_logs_request_filterLogs_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList',$response);
    }
    /**
     * Test case for getACall
     *
     * Get a Call.
     * @param  string $account_id ID of the account (required)
     * @param  string $call_id String that uniquely identifies this call resource. (required)
     */
    public function testGetACall()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->getACall($this->call_id_getACall_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallResult',$response);
    }
    /**
     * Test case for getAConference
     *
     * Get a Conference.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id A string that uniquely identifies this conference resource. (required)
     */
    public function testGetAConference()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        
        $response = $apiInstance->getAConference($this->conference_id_getAConference_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceResult',$response);
    }
    /**
     * Test case for getAMember
     *
     * Get a Member.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id String that uniquely identifies the Queue that the Member belongs to. (required)
     * @param  string $call_id ID of the Call that the Member belongs to (required)
     */
    public function testGetAMember()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->getAMember($this->queue_id_getAMember_test_value(), $this->call_id_getAMember_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember',$response);
    }
    /**
     * Test case for getAParticipant
     *
     * Get a Participant.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id ID of the conference this participant is in. (required)
     * @param  string $call_id ID of the Call associated with this participant. (required)
     */
    public function testGetAParticipant()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->getAParticipant($this->conference_id_getAParticipant_test_value(), $this->call_id_getAParticipant_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantResult',$response);
    }
    /**
     * Test case for getAQueue
     *
     * Get a Queue.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id A string that uniquely identifies this queue resource. (required)
     */
    public function testGetAQueue()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        
        $response = $apiInstance->getAQueue($this->queue_id_getAQueue_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult',$response);
    }
    /**
     * Test case for getARecording
     *
     * Get a Recording.
     * @param  string $account_id ID of the account (required)
     * @param  string $recording_id String that uniquely identifies this recording resource. (required)
     */
    public function testGetARecording()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$recording_id = $recording_id_test_value;
        
        $response = $apiInstance->getARecording($this->recording_id_getARecording_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingResult',$response);
    }
    /**
     * Test case for getAnAccount
     *
     * Get an Account.
     * @param  string $account_id ID of the account (required)
     */
    public function testGetAnAccount()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        
        $response = $apiInstance->getAnAccount();
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\AccountResult',$response);
    }
    /**
     * Test case for getAnApplication
     *
     * Get an Application.
     * @param  string $account_id ID of the account (required)
     * @param  string $application_id A string that uniquely identifies this application resource. (required)
     */
    public function testGetAnApplication()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$application_id = $application_id_test_value;
        
        $response = $apiInstance->getAnApplication($this->application_id_getAnApplication_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult',$response);
    }
    /**
     * Test case for getAnIncomingNumber
     *
     * Get an Incoming Number.
     * @param  string $account_id ID of the account (required)
     * @param  string $phone_number_id String that uniquely identifies this phone number resource. (required)
     */
    public function testGetAnIncomingNumber()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$phone_number_id = $phone_number_id_test_value;
        
        $response = $apiInstance->getAnIncomingNumber($this->phone_number_id_getAnIncomingNumber_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult',$response);
    }
    /**
     * Test case for getAnSmsMessage
     *
     * Get an SMS Message.
     * @param  string $account_id ID of the account (required)
     * @param  string $message_id String that uniquely identifies this Message resource. (required)
     */
    public function testGetAnSmsMessage()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$message_id = $message_id_test_value;
        
        $response = $apiInstance->getAnSmsMessage($this->message_id_getAnSmsMessage_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessageResult',$response);
    }
    /**
     * Test case for getHeadMember
     *
     * Get Head Member.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id String that uniquely identifies the Queue that the Member belongs to. (required)
     */
    public function testGetHeadMember()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        
        $response = $apiInstance->getHeadMember($this->queue_id_getHeadMember_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember',$response);
    }
    /**
     * Test case for getTenDLCSmsBrand
     *
     * Get a 10DLC SMS Brand.
     * @param  string $account_id ID of the account (required)
     * @param  string $brand_id String that uniquely identifies this brand resource. (required)
     */
    public function testGetTenDLCSmsBrand()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$brand_id = $brand_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsBrand($this->brand_id_getTenDLCSmsBrand_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCBrand',$response);
    }
    /**
     * Test case for getTenDLCSmsBrands
     *
     * Get list of SMS 10DLC Brands.
     * @param  string $account_id ID of the account (required)
     */
    public function testGetTenDLCSmsBrands()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsBrands();
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCBrandsListResult',$response);
    }
    /**
     * Test case for getTenDLCSmsCampaign
     *
     * Get a 10DLC SMS Campaign.
     * @param  string $account_id ID of the account (required)
     * @param  string $campaign_id String that uniquely identifies this campaign resource. (required)
     */
    public function testGetTenDLCSmsCampaign()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$campaign_id = $campaign_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsCampaign($this->campaign_id_getTenDLCSmsCampaign_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCCampaign',$response);
    }
    /**
     * Test case for getTenDLCSmsCampaigns
     *
     * Get list of SMS 10DLC Campaigns.
     * @param  string $account_id ID of the account (required)
     * @param  string $brand_id The unique identifier for a brand (optional)
     */
    public function testGetTenDLCSmsCampaigns()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$brand_id = $brand_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsCampaigns($this->brand_id_getTenDLCSmsCampaigns_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCCampaignsListResult',$response);
    }
    /**
     * Test case for getTenDLCSmsPartnerCampaign
     *
     * Get a 10DLC SMS Partner Campaign.
     * @param  string $account_id ID of the account (required)
     * @param  string $campaign_id String that uniquely identifies this campaign resource. (required)
     */
    public function testGetTenDLCSmsPartnerCampaign()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$campaign_id = $campaign_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsPartnerCampaign($this->campaign_id_getTenDLCSmsPartnerCampaign_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCPartnerCampaign',$response);
    }
    /**
     * Test case for getTenDLCSmsPartnerCampaigns
     *
     * Get list of SMS 10DLC Partner Campaigns.
     * @param  string $account_id ID of the account (required)
     * @param  string $brand_id The unique identifier for a brand (optional)
     */
    public function testGetTenDLCSmsPartnerCampaigns()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$brand_id = $brand_id_test_value;
        
        $response = $apiInstance->getTenDLCSmsPartnerCampaigns($this->brand_id_getTenDLCSmsPartnerCampaigns_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCPartnerCampaignsListResult',$response);
    }
    /**
     * Test case for listActiveQueues
     *
     * List Active Queues.
     * @param  string $account_id ID of the account (required)
     * @param  string $alias Return only the Queue resources with aliases that exactly match this name. (optional)
     */
    public function testListActiveQueues()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$alias = $alias_test_value;
        
        $response = $apiInstance->listActiveQueues($this->alias_listActiveQueues_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueList',$response);
    }
    /**
     * Test case for listAllAccountLogs
     *
     * List All Account Logs.
     * @param  string $account_id ID of the account (required)
     */
    public function testListAllAccountLogs()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        
        $response = $apiInstance->listAllAccountLogs();
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList',$response);
    }
    /**
     * Test case for listApplications
     *
     * List applications.
     * @param  string $account_id ID of the account (required)
     * @param  string $alias Return only applications with aliases that exactly match this value. (optional)
     */
    public function testListApplications()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$alias = $alias_test_value;
        
        $response = $apiInstance->listApplications($this->alias_listApplications_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationList',$response);
    }
    /**
     * Test case for listAvailableNumbers
     *
     * List available numbers.
     * @param  string $phone_number PCRE-compatible regular expression to filter against &#x60;phoneNumber&#x60; field, which is in E.164 format. (optional)
     * @param  string $region State or province of this phone number. (optional)
     * @param  string $country Country of this phone number. (optional)
     * @param  bool $voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true)
     * @param  bool $sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true)
     * @param  bool $capabilities_voice capabilities_voice (optional)
     * @param  bool $capabilities_sms capabilities_sms (optional)
     * @param  bool $capabilities_toll_free capabilities_toll_free (optional)
     * @param  bool $capabilities_ten_dlc capabilities_ten_dlc (optional)
     * @param  bool $capabilities_short_code capabilities_short_code (optional)
     */
    public function testListAvailableNumbers()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$phone_number = $phone_number_test_value;
        //$region = $region_test_value;
        //$country = $country_test_value;
        //$voice_enabled = $voice_enabled_test_value;
        //$sms_enabled = $sms_enabled_test_value;
        //$capabilities_voice = $capabilities_voice_test_value;
        //$capabilities_sms = $capabilities_sms_test_value;
        //$capabilities_toll_free = $capabilities_toll_free_test_value;
        //$capabilities_ten_dlc = $capabilities_ten_dlc_test_value;
        //$capabilities_short_code = $capabilities_short_code_test_value;
        
        $response = $apiInstance->listAvailableNumbers($this->phone_number_listAvailableNumbers_test_value(), $this->region_listAvailableNumbers_test_value(), $this->country_listAvailableNumbers_test_value(), $this->voice_enabled_listAvailableNumbers_test_value(), $this->sms_enabled_listAvailableNumbers_test_value(), $this->capabilities_voice_listAvailableNumbers_test_value(), $this->capabilities_sms_listAvailableNumbers_test_value(), $this->capabilities_toll_free_listAvailableNumbers_test_value(), $this->capabilities_ten_dlc_listAvailableNumbers_test_value(), $this->capabilities_short_code_listAvailableNumbers_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\AvailableNumberList',$response);
    }
    /**
     * Test case for listCallLogs
     *
     * List Call Logs.
     * @param  string $account_id ID of the account (required)
     * @param  string $call_id String that uniquely identifies this call resource. (required)
     */
    public function testListCallLogs()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->listCallLogs($this->call_id_listCallLogs_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList',$response);
    }
    /**
     * Test case for listCallRecordings
     *
     * List Call Recordings.
     * @param  string $account_id ID of the account (required)
     * @param  string $call_id String that uniquely identifies this call resource. (required)
     * @param  string $date_created Only show recordings created on the specified date, in the form *YYYY-MM-DD*. (optional)
     */
    public function testListCallRecordings()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$call_id = $call_id_test_value;
        //$date_created = $date_created_test_value;
        
        $response = $apiInstance->listCallRecordings($this->call_id_listCallRecordings_test_value(), $this->date_created_listCallRecordings_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList',$response);
    }
    /**
     * Test case for listCalls
     *
     * List Calls.
     * @param  string $account_id ID of the account (required)
     * @param  bool $active If active is set to true then all calls of the nature queued, ringing, inProgress are returned in the query. (optional, default to false)
     * @param  string $to Only show Calls to this phone number. (optional)
     * @param  string $from Only show Calls from this phone number. (optional)
     * @param  \FreeClimb\Api\Model\CallStatus $status Only show Calls currently in this status. May be &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;inProgress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;noAnswer&#x60;. (optional)
     * @param  string $start_time Only show Calls that started at or after this time, given as YYYY-MM-DD hh:mm:ss. (optional)
     * @param  string $end_time Only show Calls that ended at or before this time, given as YYYY-MM- DD hh:mm:ss. (optional)
     * @param  string $parent_call_id Only show Calls spawned by the call with this ID. (optional)
     * @param  string[] $application_id Only show calls belonging to the given applicationId. This parameter can be repeated to return calls from multiple Applications. (optional)
     */
    public function testListCalls()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$active = $active_test_value;
        //$to = $to_test_value;
        //$from = $from_test_value;
        //$status = $status_test_value;
        //$start_time = $start_time_test_value;
        //$end_time = $end_time_test_value;
        //$parent_call_id = $parent_call_id_test_value;
        //$application_id = $application_id_test_value;
        
        $response = $apiInstance->listCalls($this->active_listCalls_test_value(), $this->to_listCalls_test_value(), $this->from_listCalls_test_value(), $this->status_listCalls_test_value(), $this->start_time_listCalls_test_value(), $this->end_time_listCalls_test_value(), $this->parent_call_id_listCalls_test_value(), $this->application_id_listCalls_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallList',$response);
    }
    /**
     * Test case for listConferences
     *
     * List Conferences.
     * @param  string $account_id ID of the account (required)
     * @param  string $status Only show conferences that currently have the specified status. Valid values: &#x60;empty&#x60;, &#x60;populated&#x60;, &#x60;inProgress&#x60;, or &#x60;terminated&#x60;. (optional)
     * @param  string $alias List Conferences whose alias exactly matches this string. (optional)
     * @param  string $date_created Only show Conferences that were created on the specified date, in the form *YYYY-MM-DD*. (optional)
     * @param  string $date_updated Only show Conferences that were last updated on the specified date, in the form *YYYY-MM-DD*. (optional)
     */
    public function testListConferences()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$status = $status_test_value;
        //$alias = $alias_test_value;
        //$date_created = $date_created_test_value;
        //$date_updated = $date_updated_test_value;
        
        $response = $apiInstance->listConferences($this->status_listConferences_test_value(), $this->alias_listConferences_test_value(), $this->date_created_listConferences_test_value(), $this->date_updated_listConferences_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceList',$response);
    }
    /**
     * Test case for listIncomingNumbers
     *
     * List Incoming Numbers.
     * @param  string $account_id ID of the account (required)
     * @param  string $phone_number Only show incoming phone number resources that match this PCRE-compatible regular expression. (optional)
     * @param  string $alias Only show incoming phone numbers with aliases that exactly match this value. (optional)
     * @param  string $region State or province of this phone number. (optional)
     * @param  string $country Country of this phone number. (optional)
     * @param  string $application_id ID of the Application that FreeClimb should contact if a Call or SMS arrives for this phone number or a Call from this number is placed. An incoming phone number is not useful until associated with an applicationId. (optional)
     * @param  bool $has_application Indication of whether the phone number has an application linked to it. (optional, default to false)
     * @param  bool $voice_enabled Indicates whether the phone number can handle Calls. Typically set to true for all numbers. (optional, default to true) (deprecated)
     * @param  bool $sms_enabled Indication of whether the phone number can handle sending and receiving SMS messages. Typically set to true for all numbers. (optional, default to true) (deprecated)
     * @param  bool $has_campaign Indication of whether the phone number has a campaign associated with it (optional)
     * @param  bool $capabilities_voice capabilities_voice (optional)
     * @param  bool $capabilities_sms capabilities_sms (optional)
     * @param  bool $capabilities_toll_free capabilities_toll_free (optional)
     * @param  bool $capabilities_ten_dlc capabilities_ten_dlc (optional)
     * @param  bool $capabilities_short_code capabilities_short_code (optional)
     * @param  bool $offnet Indication of whether the phone number was registered as an offnet number. This field will be rendered only for requests to the IncomingPhone number resource. (optional)
     */
    public function testListIncomingNumbers()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$phone_number = $phone_number_test_value;
        //$alias = $alias_test_value;
        //$region = $region_test_value;
        //$country = $country_test_value;
        //$application_id = $application_id_test_value;
        //$has_application = $has_application_test_value;
        //$voice_enabled = $voice_enabled_test_value;
        //$sms_enabled = $sms_enabled_test_value;
        //$has_campaign = $has_campaign_test_value;
        //$capabilities_voice = $capabilities_voice_test_value;
        //$capabilities_sms = $capabilities_sms_test_value;
        //$capabilities_toll_free = $capabilities_toll_free_test_value;
        //$capabilities_ten_dlc = $capabilities_ten_dlc_test_value;
        //$capabilities_short_code = $capabilities_short_code_test_value;
        //$offnet = $offnet_test_value;
        
        $response = $apiInstance->listIncomingNumbers($this->phone_number_listIncomingNumbers_test_value(), $this->alias_listIncomingNumbers_test_value(), $this->region_listIncomingNumbers_test_value(), $this->country_listIncomingNumbers_test_value(), $this->application_id_listIncomingNumbers_test_value(), $this->has_application_listIncomingNumbers_test_value(), $this->voice_enabled_listIncomingNumbers_test_value(), $this->sms_enabled_listIncomingNumbers_test_value(), $this->has_campaign_listIncomingNumbers_test_value(), $this->capabilities_voice_listIncomingNumbers_test_value(), $this->capabilities_sms_listIncomingNumbers_test_value(), $this->capabilities_toll_free_listIncomingNumbers_test_value(), $this->capabilities_ten_dlc_listIncomingNumbers_test_value(), $this->capabilities_short_code_listIncomingNumbers_test_value(), $this->offnet_listIncomingNumbers_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberList',$response);
    }
    /**
     * Test case for listMembers
     *
     * List Members.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id String that uniquely identifies the Queue that the Member belongs to. (required)
     */
    public function testListMembers()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        
        $response = $apiInstance->listMembers($this->queue_id_listMembers_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMemberList',$response);
    }
    /**
     * Test case for listParticipants
     *
     * List Participants.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id ID of the conference this participant is in. (required)
     * @param  bool $talk Only show Participants with the talk privilege. (optional)
     * @param  bool $listen Only show Participants with the listen privilege. (optional)
     */
    public function testListParticipants()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$talk = $talk_test_value;
        //$listen = $listen_test_value;
        
        $response = $apiInstance->listParticipants($this->conference_id_listParticipants_test_value(), $this->talk_listParticipants_test_value(), $this->listen_listParticipants_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantList',$response);
    }
    /**
     * Test case for listRecordings
     *
     * List Recordings.
     * @param  string $account_id ID of the account (required)
     * @param  string $call_id Show only Recordings made during the Call with this ID. (optional)
     * @param  string $conference_id Show only Recordings made during the conference with this ID. (optional)
     * @param  string $date_created Only show Recordings created on this date, formatted as *YYYY-MM-DD*. (optional)
     */
    public function testListRecordings()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$call_id = $call_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$date_created = $date_created_test_value;
        
        $response = $apiInstance->listRecordings($this->call_id_listRecordings_test_value(), $this->conference_id_listRecordings_test_value(), $this->date_created_listRecordings_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList',$response);
    }
    /**
     * Test case for listSmsMessages
     *
     * List SMS Messages.
     * @param  string $account_id ID of the account (required)
     * @param  string $to Only show Messages to this phone number. (optional)
     * @param  string $from Only show Messages from this phone number. (optional)
     * @param  string $begin_time Only show Messages sent at or after this time (GMT), given as *YYYY-MM-DD hh:mm:ss*. (optional)
     * @param  string $end_time Only show messages sent at or before this time (GMT), given as *YYYY-MM-DD hh:mm*.. (optional)
     * @param  \FreeClimb\Api\Model\MessageDirection $direction Either &#x60;inbound&#x60; or &#x60;outbound&#x60;. Only show Messages that were either *sent from* or *received by* FreeClimb. (optional)
     * @param  string $campaign_id Only show messages associated with this campaign ID. (optional)
     * @param  string $brand_id Only show messages associated with this brand ID (optional)
     * @param  bool $is10_dlc Only show messages that were sent as part of a 10DLC campaign. (optional)
     */
    public function testListSmsMessages()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$to = $to_test_value;
        //$from = $from_test_value;
        //$begin_time = $begin_time_test_value;
        //$end_time = $end_time_test_value;
        //$direction = $direction_test_value;
        //$campaign_id = $campaign_id_test_value;
        //$brand_id = $brand_id_test_value;
        //$is10_dlc = $is10_dlc_test_value;
        
        $response = $apiInstance->listSmsMessages($this->to_listSmsMessages_test_value(), $this->from_listSmsMessages_test_value(), $this->begin_time_listSmsMessages_test_value(), $this->end_time_listSmsMessages_test_value(), $this->direction_listSmsMessages_test_value(), $this->campaign_id_listSmsMessages_test_value(), $this->brand_id_listSmsMessages_test_value(), $this->is10_dlc_listSmsMessages_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessagesList',$response);
    }
    /**
     * Test case for makeACall
     *
     * Make a Call.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\MakeCallRequest $make_call_request Call details for making a call (optional)
     */
    public function testMakeACall()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$make_call_request = $make_call_request_test_value;
        
        $response = $apiInstance->makeACall($this->make_call_request_makeACall_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallResult',$response);
    }
    /**
     * Test case for removeAParticipant
     *
     * Remove a Participant.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id ID of the conference this participant is in. (required)
     * @param  string $call_id ID of the Call associated with this participant. (required)
     */
    public function testRemoveAParticipant()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$call_id = $call_id_test_value;
        
        $response = $apiInstance->removeAParticipant($this->conference_id_removeAParticipant_test_value(), $this->call_id_removeAParticipant_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for sendAnSmsMessage
     *
     * Send an SMS Message.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\MessageRequest $message_request Details to create a message (required)
     */
    public function testSendAnSmsMessage()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$message_request = $message_request_test_value;
        
        $response = $apiInstance->sendAnSmsMessage($this->message_request_sendAnSmsMessage_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessageResult',$response);
    }
    /**
     * Test case for streamARecordingFile
     *
     * Stream a Recording File.
     * @param  string $account_id ID of the account (required)
     * @param  string $recording_id String that uniquely identifies this recording resource. (required)
     */
    public function testStreamARecordingFile()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$recording_id = $recording_id_test_value;
        
        $response = $apiInstance->streamARecordingFile($this->recording_id_streamARecordingFile_test_value());
        
        
        $this->assertInstanceOf('\SplFileObject',$response);
    }
    /**
     * Test case for updateAConference
     *
     * Update a Conference.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id String that uniquely identifies this conference resource. (required)
     * @param  \FreeClimb\Api\Model\UpdateConferenceRequest $update_conference_request Conference Details to update (optional)
     */
    public function testUpdateAConference()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$update_conference_request = $update_conference_request_test_value;
        
        $response = $apiInstance->updateAConference($this->conference_id_updateAConference_test_value(), $this->update_conference_request_updateAConference_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceResult',$response);
    }
    /**
     * Test case for updateALiveCall
     *
     * Update a Live Call.
     * @param  string $account_id ID of the account (required)
     * @param  string $call_id String that uniquely identifies this call resource. (required)
     * @param  \FreeClimb\Api\Model\UpdateCallRequest $update_call_request Call details to update (required)
     */
    public function testUpdateALiveCall()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$call_id = $call_id_test_value;
        //$update_call_request = $update_call_request_test_value;
        
        $response = $apiInstance->updateALiveCall($this->call_id_updateALiveCall_test_value(), $this->update_call_request_updateALiveCall_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for updateAParticipant
     *
     * Update a Participant.
     * @param  string $account_id ID of the account (required)
     * @param  string $conference_id ID of the conference this participant is in. (required)
     * @param  string $call_id ID of the Call associated with this participant. (required)
     * @param  \FreeClimb\Api\Model\UpdateConferenceParticipantRequest $update_conference_participant_request Conference participant details to update (optional)
     */
    public function testUpdateAParticipant()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$conference_id = $conference_id_test_value;
        //$call_id = $call_id_test_value;
        //$update_conference_participant_request = $update_conference_participant_request_test_value;
        
        $response = $apiInstance->updateAParticipant($this->conference_id_updateAParticipant_test_value(), $this->call_id_updateAParticipant_test_value(), $this->update_conference_participant_request_updateAParticipant_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantResult',$response);
    }
    /**
     * Test case for updateAQueue
     *
     * Update a Queue.
     * @param  string $account_id ID of the account (required)
     * @param  string $queue_id A string that uniquely identifies this Queue resource. (required)
     * @param  \FreeClimb\Api\Model\QueueRequest $queue_request Queue Details to update (optional)
     */
    public function testUpdateAQueue()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$queue_id = $queue_id_test_value;
        //$queue_request = $queue_request_test_value;
        
        $response = $apiInstance->updateAQueue($this->queue_id_updateAQueue_test_value(), $this->queue_request_updateAQueue_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult',$response);
    }
    /**
     * Test case for updateAnAccount
     *
     * Manage an account.
     * @param  string $account_id ID of the account (required)
     * @param  \FreeClimb\Api\Model\AccountRequest $account_request Account details to update (optional)
     */
    public function testUpdateAnAccount()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$account_request = $account_request_test_value;
        
        $response = $apiInstance->updateAnAccount($this->account_request_updateAnAccount_test_value());
        
        $this->assertNull($response);
    }
    /**
     * Test case for updateAnApplication
     *
     * Update an application.
     * @param  string $account_id ID of the account (required)
     * @param  string $application_id A string that uniquely identifies this application resource. (required)
     * @param  \FreeClimb\Api\Model\ApplicationRequest $application_request Application details to update. (optional)
     */
    public function testUpdateAnApplication()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$application_id = $application_id_test_value;
        //$application_request = $application_request_test_value;
        
        $response = $apiInstance->updateAnApplication($this->application_id_updateAnApplication_test_value(), $this->application_request_updateAnApplication_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult',$response);
    }
    /**
     * Test case for updateAnIncomingNumber
     *
     * Update an Incoming Number.
     * @param  string $account_id ID of the account (required)
     * @param  string $phone_number_id String that uniquely identifies this phone number resource. (required)
     * @param  \FreeClimb\Api\Model\IncomingNumberRequest $incoming_number_request Incoming Number details to update (optional)
     */
    public function testUpdateAnIncomingNumber()
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('YOUR_ACCOUNT_ID')
            ->setPassword('YOUR_API_KEY');


        $apiInstance = new DefaultApi(
            new Client(),
            $config
        );

        //$account_id = $account_id_test_value;
        //$phone_number_id = $phone_number_id_test_value;
        //$incoming_number_request = $incoming_number_request_test_value;
        
        $response = $apiInstance->updateAnIncomingNumber($this->phone_number_id_updateAnIncomingNumber_test_value(), $this->incoming_number_request_updateAnIncomingNumber_test_value());
        
        
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult',$response);
    }
}
