<?php

/**
 * DefaultApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace FreeClimb\Api\Test\Api;

use \FreeClimb\Api\Configuration;
use \FreeClimb\Api\ApiException;
use \FreeClimb\Api\ObjectSerializer;
use PHPUnit\Framework\TestCase;
use FreeClimb\Api\Api\DefaultApi;
use FreeClimb\Api\Model\CallStatus;
use FreeClimb\Api\Model\MessageDirection;
use FreeClimb\Api\Model\PlayBeep;
use FreeClimb\Api\Model\UpdateCallRequestStatus;
use FreeClimb\Api\Model\UpdateConferenceRequestStatus;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApiTest extends TestCase
{
    /**
     * @var DefaultApi
     */
    private static $apiInstance;
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()
            ->setHost('http://127.0.0.1:4010')
            ->setUsername('AC0123456789abcdefABCDEF0123456789abcdef00')
            ->setPassword('123ABC123ABC123ABC123ABC123ABC123ABCID');


        static::$apiInstance = new DefaultApi(
            new Client(),
            $config
        );
    }

    public function buy_incoming_number_request_buyAPhoneNumber_test_value(): \FreeClimb\Api\Model\BuyIncomingNumberRequest
    {
        return new \FreeClimb\Api\Model\BuyIncomingNumberRequest([
            "phone_number" => "phoneNumber_example",
            "alias" => "alias_example",
            "application_id" => "applicationId_example"
        ]); 
    } 

    public function create_conference_request_createAConference_test_value(): \FreeClimb\Api\Model\CreateConferenceRequest
    {
        return new \FreeClimb\Api\Model\CreateConferenceRequest([
        "alias" => "alias_example",
        "play_beep" => PlayBeep::ALWAYS,
        "record" => true,
        "wait_url" => "https://waitUrl_example.com",
        "status_callback_url" => "https://statusCallbackUrl_example.com"
        ]); 
    } 

    public function queue_request_createAQueue_test_value(): \FreeClimb\Api\Model\QueueRequest
    {
        return new \FreeClimb\Api\Model\QueueRequest(
            [
            "alias" => "alias_example",
            "max_size" => 0
        ]
        );
    } 

    public function application_request_createAnApplication_test_value(): \FreeClimb\Api\Model\ApplicationRequest
    {
        return new \FreeClimb\Api\Model\ApplicationRequest([
        "alias" => "alias_example",
        "voice_url" => "https://voiceUrl_example.com",
        "voice_fallback_url" => "https://voiceFallbackUrl_example.com",
        "call_connect_url" => "https://voiceUrl_example.com",
        "status_callback_url" => "https://statusCallbackUrl_example.com",
        "sms_url" => "https://smsUrl_example.com",
        "sms_fallback_url" => "https://smsFallbackUrl_example.com"
    ]);
    } 

    public function recording_id_deleteARecording_test_value(): string
    {
        return 'recording_id_example';
    } 
    public function application_id_deleteAnApplication_test_value(): string
    {
        return 'application_id_example';
    } 
    public function phone_number_id_deleteAnIncomingNumber_test_value(): string
    {
        return 'phone_number_id_example';
    } 
    public function queue_id_dequeueAMember_test_value(): string
    {
        return 'queue_id_example';
    } 
    public function call_id_dequeueAMember_test_value(): string
    {
        return 'call_id_example';
    } 
    public function queue_id_dequeueHeadMember_test_value(): string
    {
        return 'queue_id_example';
    } 
    public function recording_id_downloadARecordingFile_test_value(): string
    {
        return 'recording_id_example';
    }
    public function filter_logs_request_filterLogs_test_value(): \FreeClimb\Api\Model\FilterLogsRequest
    {
        return new \FreeClimb\Api\Model\FilterLogsRequest([
        'pql' => 'pqlExample'
    ]);
    } 
    public function call_id_getACall_test_value(): string
    {
        return 'call_id_example';
    } 
    public function conference_id_getAConference_test_value(): string
    {
        return 'conference_id_example';
    }
    public function queue_id_getAMember_test_value(): string
    {
        return 'queue_id_example';
    }
    public function call_id_getAMember_test_value(): string
    {
        return 'call_id_example';
    }
    public function conference_id_getAParticipant_test_value(): string
    {
        return 'conference_id_example';
    }
    public function call_id_getAParticipant_test_value(): string
    {
        return 'call_id_example';
    }
    public function queue_id_getAQueue_test_value(): string
    {
        return 'queue_id_example';
    }
    public function recording_id_getARecording_test_value(): string
    {
        return 'recording_id_example';
    }
    public function application_id_getAnApplication_test_value(): string
    {
        return 'application_id_example';
    }
    public function phone_number_id_getAnIncomingNumber_test_value(): string
    {
        return 'phone_number_id_example';
    }
    public function message_id_getAnSmsMessage_test_value(): string
    {
        return 'message_id_example'; 
    }
    public function queue_id_getHeadMember_test_value(): string
    {
        return 'queue_id_example';
    }
    public function alias_listActiveQueues_test_value(): string
    {
        return 'alias_example';
    }
    public function alias_listApplications_test_value(): string
    {
        return 'alias_example';
    }
    public function phone_number_listAvailableNumbers_test_value(): string
    {
        return 'phone_number_example';
    }
    public function region_listAvailableNumbers_test_value(): string
    {
        return 'region_example';
    }
    public function country_listAvailableNumbers_test_value(): string
    {
        return 'country_example';
    }
    public function voice_enabled_listAvailableNumbers_test_value(): string
    {

        return "true";
    }
    public function sms_enabled_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_voice_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_sms_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_toll_free_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_ten_dlc_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_short_code_listAvailableNumbers_test_value(): string
    {
        return "true";
    }
    public function call_id_listCallLogs_test_value(): string
    {
        return 'call_id_example';
    }
    public function call_id_listCallRecordings_test_value(): string
    {
        return 'call_id_example';
    }
    public function date_created_listCallRecordings_test_value(): string
    {
        return 'date_created_example';
    } 
    public function active_listCalls_test_value(): string
    {
        return "false";
    }
    public function to_listCalls_test_value(): string
    {
        return 'to_example';
    }
    public function from_listCalls_test_value(): string
    {
        return 'from_example';
    }
    public function status_listCalls_test_value(): string
    {
        return CallStatus::COMPLETED;
    }
    public function start_time_listCalls_test_value(): string
    {
        return 'start_time_example';
    }
    public function end_time_listCalls_test_value(): string
    {
        return 'end_time_example';
    }
    public function parent_call_id_listCalls_test_value(): string
    {
        return 'parent_call_id_example';
    }
    public function application_id_listCalls_test_value(): array
    {
        return ['AP0123456789ABCDEFabcedf000000000000000001', 'AP0123456789ABCDEFabcedf000000000000000002', "AP0123456789ABCDEFabcedf000000000000000003"];
    }
    public function status_listConferences_test_value(): string
    {
        return 'status_example';
    }
    public function alias_listConferences_test_value(): string
    {
        return 'alias_example';
    }
    public function date_created_listConferences_test_value(): string
    {
        return 'date_created_example';
    }
    public function date_updated_listConferences_test_value(): string
    {
        return 'date_updated_example';
    }

    public function phone_number_listIncomingNumbers_test_value(): string
    {
        return 'phone_number_example';
    }
    public function alias_listIncomingNumbers_test_value(): string
    {
        return 'alias_example';
    }
    public function region_listIncomingNumbers_test_value(): string
    {
        return 'region_example';
    }
    public function country_listIncomingNumbers_test_value(): string
    {
        return 'country_example';
    }
    public function application_id_listIncomingNumbers_test_value(): string
    {
        return 'application_id_example';
    }
    public function has_application_listIncomingNumbers_test_value(): string
    {
        return "false";
    }
    public function voice_enabled_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function sms_enabled_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_voice_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_sms_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_toll_free_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_ten_dlc_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function capabilities_short_code_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function queue_id_listMembers_test_value(): string
    {
        return 'queue_id_example';
    }
    public function conference_id_listParticipants_test_value(): string
    {
        return 'conference_id_example';
    }
    public function talk_listParticipants_test_value(): string
    {
        return "true";
    }
    public function listen_listParticipants_test_value(): string
    {
        return "true";
    }
    public function to_listSmsMessages_test_value(): string
    {
        return 'to_example';
    }
    public function from_listSmsMessages_test_value(): string
    {
        return 'from_example';
    }
    public function begin_time_listSmsMessages_test_value(): string
    {
        return 'begin_time_example';
    } 
    public function end_time_listSmsMessages_test_value(): string
    {
        return 'end_time_example';
    }
    public function direction_listSmsMessages_test_value(): string
    {
        return MessageDirection::INBOUND;
    }
    public function conference_id_removeAParticipant_test_value(): string
    {
        return 'conference_id_example';
    }
    public function call_id_removeAParticipant_test_value(): string
    {
        return 'call_id_example';
    }
    public function recording_id_streamARecordingFile_test_value(): string
    {
        return 'recording_id_example';
    }
    public function conference_id_updateAConference_test_value(): string
    {
        return 'conference_id_example';
    }
    public function call_id_updateALiveCall_test_value(): string
    {
        return 'call_id_example';
    } 
    public function conference_id_updateAParticipant_test_value(): string
    {
        return 'conference_id_example';
    }
    public function call_id_updateAParticipant_test_value(): string
    {
        return 'call_id_example';
    }
    public function queue_id_updateAQueue_test_value(): string
    {
        return 'queue_id_example';
    }
    public function application_id_updateAnApplication_test_value(): string
    {
        return 'application_id_example';
    }
    public function phone_number_id_updateAnIncomingNumber_test_value(): string
    {
        return 'phone_number_id_example';
    }
    public function offnet_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function call_id_listRecordings_test_value(): string
    {
        return 'call_id_example';
    }
    public function conference_id_listRecordings_test_value(): string
    {
        return 'conference_id_example';
    }
    public function date_created_listRecordings_test_value(): string
    {
        return 'date_created_example';
    }
    public function brand_id_getTenDLCSmsCampaigns_test_value(): string
    {
        return "BX56XX4";
    }
    public function brand_id_getTenDLCSmsPartnerCampaigns_test_value(): string
    {
        return "BX56XX4";
    }
    public function brand_id_getTenDLCSmsBrand_test_value(): string
    {
        return "BX56XX4";
    }
    public function campaign_id_getTenDLCSmsCampaign_test_value(): string
    {
        return "CX56XX4";
    }
    public function campaign_id_getTenDLCSmsPartnerCampaign_test_value(): string
    {
        return "CX56XX4";
    }
    public function has_campaign_listIncomingNumbers_test_value(): string
    {
        return "true";
    }
    public function campaign_id_listSmsMessages_test_value(): string
    {
        return "BX56XX4";
    }
    public function brand_id_listSmsMessages_test_value(): string
    {
        return "BX56XX4";
    }
    public function is10_dlc_listSmsMessages_test_value(): string
    {
        return "true";
    }
    public function campaign_id_getTollFreeSmsCampaign_test_value(): string
    {
        return "BX56XX4";
    }

    public function call_id_listConferenceRecordings_test_value(): string
    {
        return 'call_id_example';
    }

    public function tfn_campaign_id_listIncomingNumbers_test_value(): string
    {
        return "BX56XX4";
    }
    public function conference_id_listConferenceRecordings_test_value(): string
    {
        return 'conference_id_example';
    }
    public function date_created_listConferenceRecordings_test_value(): string
    {
        return 'date_created_example';
    }
    public function create_web_rtc_token_makeAWebrtcJwt_test_value(): \FreeClimb\Api\Model\CreateWebRTCToken
    {
        $token = new \FreeClimb\Api\Model\CreateWebRTCToken();    
        $token->setTo("TS");
        $token->setFrom("TS");
        $token->setUses(1);
        return $token;
    }
    public function queue_request_updateAQueue_test_value(): \FreeClimb\Api\Model\QueueRequest
    {
        return new \FreeClimb\Api\Model\QueueRequest(
            [
            "alias" => "alias_example",
            "max_size" => 0
        ]
        );
    }
    public function application_request_updateAnApplication_test_value(): \FreeClimb\Api\Model\ApplicationRequest
    {
        return new \FreeClimb\Api\Model\ApplicationRequest([
        "alias" => "alias_example",
        "voice_url" => "https://voiceUrl_example.com",
        "voice_fallback_url" => "https://voiceFallbackUrl_example.com",
        "call_connect_url" => "https://voiceUrl_example.com",
        "status_callback_url" => "https://statusCallbackUrl_example.com",
        "sms_url" => "https://smsUrl_example.com",
        "sms_fallback_url" => "https://smsFallbackUrl_example.com"
    ]);
    }
    public function make_call_request_makeACall_test_value(): \FreeClimb\Api\Model\MakeCallRequest
    {
        return new \FreeClimb\Api\Model\MakeCallRequest([
        "from" => "from_example",
        "to" => "to_example",
        "application_id" => "applicationId_example",
        "send_digits" => "sendDigits_example",
        "if_machine" => "ifMachine_example",
        "if_machine_url" => "https://ifMachineUrl_example.com",
        "timeout" => 10,
        "parent_call_id" => "parentCallId_example",
        "privacy_mode" => false,
        "call_connect_url" => "https://callConnectUrl_example.com"
    ]);
    }
    public function message_request_sendAnSmsMessage_test_value(): \FreeClimb\Api\Model\MessageRequest
    {
        return new \FreeClimb\Api\Model\MessageRequest([
        "uri" => "uri_example",
        "date_created" => "dateCreated_example",
        "date_updated" => "dateUpdated_example",
        "revision" => 0,
        "from" => "from_example",
        "to" => "to_example",
        "text" => "text_example",
        "notification_url" => "https://notificationUrl_example.com",
        "account_id" => "accountId_example"
    ]);
    }

    public function update_conference_request_updateAConference_test_value(): \FreeClimb\Api\Model\UpdateConferenceRequest
    {
        return new \FreeClimb\Api\Model\UpdateConferenceRequest([
        "alias" => "from_example",
        "play_beep" => PlayBeep::ALWAYS,
        "status" => UpdateConferenceRequestStatus::EMPTY,
    ]);
    } 

    public function update_call_request_updateALiveCall_test_value(): \FreeClimb\Api\Model\UpdateCallRequest
    {
        return new \FreeClimb\Api\Model\UpdateCallRequest([
        "status" => UpdateCallRequestStatus::COMPLETED
    ]);
    }

    public function update_conference_participant_request_updateAParticipant_test_value(): \FreeClimb\Api\Model\UpdateConferenceParticipantRequest
    {
        return new \FreeClimb\Api\Model\UpdateConferenceParticipantRequest([
        "talk" => true,
        "listen" => true,
    ]);
    }

    public function account_request_updateAnAccount_test_value(): \FreeClimb\Api\Model\AccountRequest
    {
        return new \FreeClimb\Api\Model\AccountRequest([
        "alias" => "alias_example",
        "label" => "label_example",
    ]);
    } 

    public function incoming_number_request_updateAnIncomingNumber_test_value(): \FreeClimb\Api\Model\IncomingNumberRequest
    {
        return new \FreeClimb\Api\Model\IncomingNumberRequest([
        "application_id" => "applicationId_example",
        "alias" => "alias_example"
        ]);
    }

    public function knowledge_base_id_createKnowledgeBaseCompletion_test_value()
    {
        return 'knowledge_base_id_example';
    }

    public function completion_request_createKnowledgeBaseCompletion_test_value()
    {
        return new \FreeClimb\Api\Model\CompletionRequest([
        "query" => "query_example",
        ]);
    }

    public function dtmf_pass_through_listParticipants_test_value()
    {
        return "true";
    }

    public function export_request_createExport_test_value()
    {
        return new \FreeClimb\Api\Model\ExportRequest([
            "resource_type" => \FreeClimb\Api\Model\ExportResourceType::MESSAGES,
            "output" => new \FreeClimb\Api\Model\ExportRequestOutput([
                "type" => \FreeClimb\Api\Model\ExportOutputType::CSV
            ]),
            "format" => ["id", "from", "to", "text"],
            "query" => (object)["status" => "completed"]
        ]);
    }

    public function export_id_deleteAnExport_test_value()
    {
        return "delete_export_id_test_value";
    }

    public function export_id_downloadAnExport_test_value()
    {
        return "download_export_id_value";
    }

    public function export_id_getAnExport_test_value()
    {
        return "get_export_id_value";
    }

    public function risk_score_min_listCalls_test_value()
    {
        return 10;
    }

    public function risk_score_max_listCalls_test_value()
    {
        return 90;
    }

    public function status_listExports_test_value()
    {
        return \FreeClimb\Api\Model\ExportStatus::COMPLETED;
    }

    public function cursor_listExports_test_value()
    {
        return "cursor_test_value";
    }
    public function create_blob_request_createBlob_test_value()
    {
        return new \FreeClimb\Api\Model\CreateBlobRequest([
            "alias" => "alias_example",
            "expires_at" => "expires_at_example",
            "blob" => new \stdClass()
        ]);
    }
    public function blob_id_deleteBlob_test_value()
    {
        return "BL0123456789abcdefABCDEF0123456789abcdef00";
    }
    public function blob_id_getBlob_test_value()
    {
        return "BL0123456789abcdefABCDEF0123456789abcdef00";
    }
    public function alias_listBlobs_test_value()
    {
        return "alias_example";
    }
    public function modify_blob_request_modifyBlob_test_value()
    {
        return new \FreeClimb\Api\Model\ModifyBlobRequest([
            "blob" => new \stdClass(),
            "alias" => "alias_example"
        ]);
    }
    public function replace_blob_request_replaceBlob_test_value()
    {
        return new \FreeClimb\Api\Model\ReplaceBlobRequest([
            "blob" => new \stdClass()
        ]);
    }
    public function key_deleteBlob_test_value()
    {
        return ["key_example"];
    }
    public function cursor_listBlobs_test_value()
    {
        return "cursor_test_value";
    }
    public function blob_id_modifyBlob_test_value()
    {
        return "BL0123456789abcdefABCDEF0123456789abcdef00";
    }
    public function blob_id_replaceBlob_test_value()
    {
        return "BL0123456789abcdefABCDEF0123456789abcdef00";
    }
    /**
     * Setup before running each test case
     */
    public function setUp(): void
    { 
    }
    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for buyAPhoneNumber
     *
     * Buy a Phone Number.
     *
     */
    public function testBuyAPhoneNumber()
    {

        //$buy_incoming_number_request = $buy_incoming_number_request_test_value;


        $response = static::$apiInstance->buyAPhoneNumber($this->buy_incoming_number_request_buyAPhoneNumber_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult', $response);
    }

    /**
     * Test case for createAConference
     *
     * Create a Conference.
     *
     */
    public function testCreateAConference()
    {

        //$create_conference_request = $create_conference_request_test_value;


        $response = static::$apiInstance->createAConference($this->create_conference_request_createAConference_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceResult', $response);
    }

    /**
     * Test case for createAQueue
     *
     * Create a Queue.
     *
     */
    public function testCreateAQueue()
    {

        //$queue_request = $queue_request_test_value;


        $response = static::$apiInstance->createAQueue($this->queue_request_createAQueue_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult', $response);
    }

    /**
     * Test case for createAnApplication
     *
     * Create an application.
     *
     */
    public function testCreateAnApplication()
    {

        //$application_request = $application_request_test_value;


        $response = static::$apiInstance->createAnApplication($this->application_request_createAnApplication_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult', $response);
    }

    /**
     * Test case for createBlob
     *
     * Create a Blob.
     *
     */
    public function testCreateBlob()
    {

        //$create_blob_request = $create_blob_request_test_value;


        $response = static::$apiInstance->createBlob($this->create_blob_request_createBlob_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
    }

    /**
     * Test case for createExport
     *
     * Create an Export.
     *
     */
    public function testCreateExport()
    {

        //$export_request = $export_request_test_value;


        $response = static::$apiInstance->createExport($this->export_request_createExport_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ExportResult', $response);
    }

    /**
     * Test case for createKnowledgeBaseCompletion
     *
     * Query the knowledge base.
     *
     */
    public function testCreateKnowledgeBaseCompletion()
    {

        //$knowledge_base_id = $knowledge_base_id_test_value;

        //$completion_request = $completion_request_test_value;


        $response = static::$apiInstance->createKnowledgeBaseCompletion($this->knowledge_base_id_createKnowledgeBaseCompletion_test_value(), $this->completion_request_createKnowledgeBaseCompletion_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\CompletionResult', $response);
    }

    /**
     * Test case for deleteARecording
     *
     * Delete a Recording.
     *
     */
    public function testDeleteARecording()
    {

        //$recording_id = $recording_id_test_value;


        $response = static::$apiInstance->deleteARecording($this->recording_id_deleteARecording_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for deleteAnApplication
     *
     * Delete an application.
     *
     */
    public function testDeleteAnApplication()
    {

        //$application_id = $application_id_test_value;


        $response = static::$apiInstance->deleteAnApplication($this->application_id_deleteAnApplication_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for deleteAnExport
     *
     * Delete an Export.
     *
     */
    public function testDeleteAnExport()
    {

        //$export_id = $export_id_test_value;


        $response = static::$apiInstance->deleteAnExport($this->export_id_deleteAnExport_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for deleteAnIncomingNumber
     *
     * Delete an Incoming Number.
     *
     */
    public function testDeleteAnIncomingNumber()
    {

        //$phone_number_id = $phone_number_id_test_value;


        $response = static::$apiInstance->deleteAnIncomingNumber($this->phone_number_id_deleteAnIncomingNumber_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for deleteBlob
     *
     * Delete Blob.
     *
     */
    public function testDeleteBlob()
    {

        //$blob_id = $blob_id_test_value;

        //$key = $key_test_value;


        $response = static::$apiInstance->deleteBlob($this->blob_id_deleteBlob_test_value(), $this->key_deleteBlob_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
    }

    /**
     * Test case for dequeueAMember
     *
     * Dequeue a Member.
     *
     */
    public function testDequeueAMember()
    {

        //$queue_id = $queue_id_test_value;

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->dequeueAMember($this->queue_id_dequeueAMember_test_value(), $this->call_id_dequeueAMember_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember', $response);
    }

    /**
     * Test case for dequeueHeadMember
     *
     * Dequeue Head Member.
     *
     */
    public function testDequeueHeadMember()
    {

        //$queue_id = $queue_id_test_value;


        $response = static::$apiInstance->dequeueHeadMember($this->queue_id_dequeueHeadMember_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember', $response);
    }

    /**
     * Test case for downloadARecordingFile
     *
     * Download a Recording File.
     *
     */
    public function testDownloadARecordingFile()
    {

        //$recording_id = $recording_id_test_value;


        $response = static::$apiInstance->downloadARecordingFile($this->recording_id_downloadARecordingFile_test_value());
        $this->assertInstanceOf('\SplFileObject', $response);
    }

    /**
     * Test case for downloadAnExport
     *
     * Download an Export.
     *
     */
    public function testDownloadAnExport()
    {

        //$export_id = $export_id_test_value;


        $response = static::$apiInstance->downloadAnExport($this->export_id_downloadAnExport_test_value());

        $this->assertIsString($response);
    }

    /**
     * Test case for filterLogs
     *
     * Filter Logs.
     *
     */
    public function testFilterLogs()
    {

        //$filter_logs_request = $filter_logs_request_test_value;


        $response = static::$apiInstance->filterLogs($this->filter_logs_request_filterLogs_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $response);
    }

    /**
     * Test case for getACall
     *
     * Get a Call.
     *
     */
    public function testGetACall()
    {

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->getACall($this->call_id_getACall_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallResult', $response);
    }

    /**
     * Test case for getAConference
     *
     * Get a Conference.
     *
     */
    public function testGetAConference()
    {

        //$conference_id = $conference_id_test_value;


        $response = static::$apiInstance->getAConference($this->conference_id_getAConference_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceResult', $response);
    }

    /**
     * Test case for getAMember
     *
     * Get a Member.
     *
     */
    public function testGetAMember()
    {

        //$queue_id = $queue_id_test_value;

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->getAMember($this->queue_id_getAMember_test_value(), $this->call_id_getAMember_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember', $response);
    }

    /**
     * Test case for getAParticipant
     *
     * Get a Participant.
     *
     */
    public function testGetAParticipant()
    {

        //$conference_id = $conference_id_test_value;

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->getAParticipant($this->conference_id_getAParticipant_test_value(), $this->call_id_getAParticipant_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantResult', $response);
    }

    /**
     * Test case for getAQueue
     *
     * Get a Queue.
     *
     */
    public function testGetAQueue()
    {

        //$queue_id = $queue_id_test_value;


        $response = static::$apiInstance->getAQueue($this->queue_id_getAQueue_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult', $response);
    }

    /**
     * Test case for getARecording
     *
     * Get a Recording.
     *
     */
    public function testGetARecording()
    {

        //$recording_id = $recording_id_test_value;


        $response = static::$apiInstance->getARecording($this->recording_id_getARecording_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingResult', $response);
    }

    /**
     * Test case for getAnAccount
     *
     * Get an Account.
     *
     */
    public function testGetAnAccount()
    {


        $response = static::$apiInstance->getAnAccount();
        $this->assertInstanceOf('\FreeClimb\Api\Model\AccountResult', $response);
    }

    /**
     * Test case for getAnApplication
     *
     * Get an Application.
     *
     */
    public function testGetAnApplication()
    {

        //$application_id = $application_id_test_value;


        $response = static::$apiInstance->getAnApplication($this->application_id_getAnApplication_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult', $response);
    }

    /**
     * Test case for getAnExport
     *
     * Get an Export.
     *
     */
    public function testGetAnExport()
    {

        //$export_id = $export_id_test_value;


        $response = static::$apiInstance->getAnExport($this->export_id_getAnExport_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ExportResult', $response);
    }

    /**
     * Test case for getAnIncomingNumber
     *
     * Get an Incoming Number.
     *
     */
    public function testGetAnIncomingNumber()
    {

        //$phone_number_id = $phone_number_id_test_value;


        $response = static::$apiInstance->getAnIncomingNumber($this->phone_number_id_getAnIncomingNumber_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult', $response);
    }

    /**
     * Test case for getAnSmsMessage
     *
     * Get an SMS Message.
     *
     */
    public function testGetAnSmsMessage()
    {

        //$message_id = $message_id_test_value;


        $response = static::$apiInstance->getAnSmsMessage($this->message_id_getAnSmsMessage_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessageResult', $response);
    }

    /**
     * Test case for getBlob
     *
     * Get Blob.
     *
     */
    public function testGetBlob()
    {

        //$blob_id = $blob_id_test_value;


        $response = static::$apiInstance->getBlob($this->blob_id_getBlob_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
    }

    /**
     * Test case for getHeadMember
     *
     * Get Head Member.
     *
     */
    public function testGetHeadMember()
    {

        //$queue_id = $queue_id_test_value;


        $response = static::$apiInstance->getHeadMember($this->queue_id_getHeadMember_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMember', $response);
    }

    /**
     * Test case for getTenDLCSmsBrand
     *
     * Get a 10DLC SMS Brand.
     *
     */
    public function testGetTenDLCSmsBrand()
    {

        //$brand_id = $brand_id_test_value;


        $response = static::$apiInstance->getTenDLCSmsBrand($this->brand_id_getTenDLCSmsBrand_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCBrand', $response);
    }

    /**
     * Test case for getTenDLCSmsBrands
     *
     * Get list of SMS 10DLC Brands.
     *
     */
    public function testGetTenDLCSmsBrands()
    {


        $response = static::$apiInstance->getTenDLCSmsBrands();
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCBrandsListResult', $response);
    }

    /**
     * Test case for getTenDLCSmsCampaign
     *
     * Get a 10DLC SMS Campaign.
     *
     */
    public function testGetTenDLCSmsCampaign()
    {

        //$campaign_id = $campaign_id_test_value;


        $response = static::$apiInstance->getTenDLCSmsCampaign($this->campaign_id_getTenDLCSmsCampaign_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCCampaign', $response);
    }

    /**
     * Test case for getTenDLCSmsCampaigns
     *
     * Get list of SMS 10DLC Campaigns.
     *
     */
    public function testGetTenDLCSmsCampaigns()
    {

        //$brand_id = $brand_id_test_value;


        $response = static::$apiInstance->getTenDLCSmsCampaigns($this->brand_id_getTenDLCSmsCampaigns_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCCampaignsListResult', $response);
    }

    /**
     * Test case for getTenDLCSmsPartnerCampaign
     *
     * Get a 10DLC SMS Partner Campaign.
     *
     */
    public function testGetTenDLCSmsPartnerCampaign()
    {

        //$campaign_id = $campaign_id_test_value;


        $response = static::$apiInstance->getTenDLCSmsPartnerCampaign($this->campaign_id_getTenDLCSmsPartnerCampaign_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCPartnerCampaign', $response);
    }

    /**
     * Test case for getTenDLCSmsPartnerCampaigns
     *
     * Get list of SMS 10DLC Partner Campaigns.
     *
     */
    public function testGetTenDLCSmsPartnerCampaigns()
    {

        //$brand_id = $brand_id_test_value;


        $response = static::$apiInstance->getTenDLCSmsPartnerCampaigns($this->brand_id_getTenDLCSmsPartnerCampaigns_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCPartnerCampaignsListResult', $response);
    }

    /**
     * Test case for getTollFreeSmsCampaign
     *
     * Get a TollFree SMS Campaign.
     *
     */
    public function testGetTollFreeSmsCampaign()
    {

        //$campaign_id = $campaign_id_test_value;


        $response = static::$apiInstance->getTollFreeSmsCampaign($this->campaign_id_getTollFreeSmsCampaign_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTollFreeCampaign', $response);
    }

    /**
     * Test case for getTollFreeSmsCampaigns
     *
     * Get list of TollFree Campaigns.
     *
     */
    public function testGetTollFreeSmsCampaigns()
    {


        $response = static::$apiInstance->getTollFreeSmsCampaigns();
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTollFreeCampaignsListResult', $response);
    }

    /**
     * Test case for listActiveQueues
     *
     * List Active Queues.
     *
     */
    public function testListActiveQueues()
    {

        //$alias = $alias_test_value;


        $response = static::$apiInstance->listActiveQueues($this->alias_listActiveQueues_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueList', $response);
    }

    /**
     * Test case for listAllAccountLogs
     *
     * List All Account Logs.
     *
     */
    public function testListAllAccountLogs()
    {


        $response = static::$apiInstance->listAllAccountLogs();
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $response);
    }

    /**
     * Test case for listApplications
     *
     * List applications.
     *
     */
    public function testListApplications()
    {

        //$alias = $alias_test_value;


        $response = static::$apiInstance->listApplications($this->alias_listApplications_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationList', $response);
    }

    /**
     * Test case for listAvailableNumbers
     *
     * List available numbers.
     *
     */
    public function testListAvailableNumbers()
    {

        //$phone_number = $phone_number_test_value;

        //$region = $region_test_value;

        //$country = $country_test_value;

        //$voice_enabled = $voice_enabled_test_value;

        //$sms_enabled = $sms_enabled_test_value;

        //$capabilities_voice = $capabilities_voice_test_value;

        //$capabilities_sms = $capabilities_sms_test_value;

        //$capabilities_toll_free = $capabilities_toll_free_test_value;

        //$capabilities_ten_dlc = $capabilities_ten_dlc_test_value;

        //$capabilities_short_code = $capabilities_short_code_test_value;


        $response = static::$apiInstance->listAvailableNumbers($this->phone_number_listAvailableNumbers_test_value(), $this->region_listAvailableNumbers_test_value(), $this->country_listAvailableNumbers_test_value(), $this->voice_enabled_listAvailableNumbers_test_value(), $this->sms_enabled_listAvailableNumbers_test_value(), $this->capabilities_voice_listAvailableNumbers_test_value(), $this->capabilities_sms_listAvailableNumbers_test_value(), $this->capabilities_toll_free_listAvailableNumbers_test_value(), $this->capabilities_ten_dlc_listAvailableNumbers_test_value(), $this->capabilities_short_code_listAvailableNumbers_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\AvailableNumberList', $response);
    }

    /**
     * Test case for listBlobs
     *
     * List Blobs belonging to an account..
     *
     */
    public function testListBlobs()
    {

        //$alias = $alias_test_value;

        //$cursor = $cursor_test_value;


        $response = static::$apiInstance->listBlobs($this->alias_listBlobs_test_value(), $this->cursor_listBlobs_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobListResponse', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobListResponse', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobListResponse', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobListResponse', $response);
    }

    /**
     * Test case for listCallLogs
     *
     * List Call Logs.
     *
     */
    public function testListCallLogs()
    {

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->listCallLogs($this->call_id_listCallLogs_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $response);
    }

    /**
     * Test case for listCallRecordings
     *
     * List Call Recordings.
     *
     */
    public function testListCallRecordings()
    {

        //$call_id = $call_id_test_value;

        //$date_created = $date_created_test_value;


        $response = static::$apiInstance->listCallRecordings($this->call_id_listCallRecordings_test_value(), $this->date_created_listCallRecordings_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $response);
    }

    /**
     * Test case for listCalls
     *
     * List Calls.
     *
     */
    public function testListCalls()
    {

        //$active = $active_test_value;

        //$to = $to_test_value;

        //$from = $from_test_value;

        //$status = $status_test_value;

        //$start_time = $start_time_test_value;

        //$end_time = $end_time_test_value;

        //$parent_call_id = $parent_call_id_test_value;

        //$application_id = $application_id_test_value;

        //$risk_score_min = $risk_score_min_test_value;

        //$risk_score_max = $risk_score_max_test_value;


        $response = static::$apiInstance->listCalls($this->active_listCalls_test_value(), $this->to_listCalls_test_value(), $this->from_listCalls_test_value(), $this->status_listCalls_test_value(), $this->start_time_listCalls_test_value(), $this->end_time_listCalls_test_value(), $this->parent_call_id_listCalls_test_value(), $this->application_id_listCalls_test_value(), $this->risk_score_min_listCalls_test_value(), $this->risk_score_max_listCalls_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallList', $response);
    }

    /**
     * Test case for listConferenceRecordings
     *
     * List Conference Recordings.
     *
     */
    public function testListConferenceRecordings()
    {

        //$conference_id = $conference_id_test_value;

        //$call_id = $call_id_test_value;

        //$date_created = $date_created_test_value;


        $response = static::$apiInstance->listConferenceRecordings($this->conference_id_listConferenceRecordings_test_value(), $this->call_id_listConferenceRecordings_test_value(), $this->date_created_listConferenceRecordings_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $response);
    }

    /**
     * Test case for listConferences
     *
     * List Conferences.
     *
     */
    public function testListConferences()
    {

        //$status = $status_test_value;

        //$alias = $alias_test_value;

        //$date_created = $date_created_test_value;

        //$date_updated = $date_updated_test_value;


        $response = static::$apiInstance->listConferences($this->status_listConferences_test_value(), $this->alias_listConferences_test_value(), $this->date_created_listConferences_test_value(), $this->date_updated_listConferences_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceList', $response);
    }

    /**
     * Test case for listExports
     *
     * List Exports.
     *
     */
    public function testListExports()
    {

        //$status = $status_test_value;

        //$cursor = $cursor_test_value;


        $response = static::$apiInstance->listExports($this->status_listExports_test_value(), $this->cursor_listExports_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ExportList', $response);
    }

    /**
     * Test case for listIncomingNumbers
     *
     * List Incoming Numbers.
     *
     */
    public function testListIncomingNumbers()
    {

        //$phone_number = $phone_number_test_value;

        //$alias = $alias_test_value;

        //$region = $region_test_value;

        //$country = $country_test_value;

        //$application_id = $application_id_test_value;

        //$has_application = $has_application_test_value;

        //$has_campaign = $has_campaign_test_value;

        //$capabilities_voice = $capabilities_voice_test_value;

        //$capabilities_sms = $capabilities_sms_test_value;

        //$capabilities_toll_free = $capabilities_toll_free_test_value;

        //$capabilities_ten_dlc = $capabilities_ten_dlc_test_value;

        //$capabilities_short_code = $capabilities_short_code_test_value;

        //$tfn_campaign_id = $tfn_campaign_id_test_value;

        //$offnet = $offnet_test_value;


        $response = static::$apiInstance->listIncomingNumbers($this->phone_number_listIncomingNumbers_test_value(), $this->alias_listIncomingNumbers_test_value(), $this->region_listIncomingNumbers_test_value(), $this->country_listIncomingNumbers_test_value(), $this->application_id_listIncomingNumbers_test_value(), $this->has_application_listIncomingNumbers_test_value(), $this->has_campaign_listIncomingNumbers_test_value(), $this->capabilities_voice_listIncomingNumbers_test_value(), $this->capabilities_sms_listIncomingNumbers_test_value(), $this->capabilities_toll_free_listIncomingNumbers_test_value(), $this->capabilities_ten_dlc_listIncomingNumbers_test_value(), $this->capabilities_short_code_listIncomingNumbers_test_value(), $this->tfn_campaign_id_listIncomingNumbers_test_value(), $this->offnet_listIncomingNumbers_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberList', $response);
    }

    /**
     * Test case for listMembers
     *
     * List Members.
     *
     */
    public function testListMembers()
    {

        //$queue_id = $queue_id_test_value;


        $response = static::$apiInstance->listMembers($this->queue_id_listMembers_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMemberList', $response);
    }

    /**
     * Test case for listParticipants
     *
     * List Participants.
     *
     */
    public function testListParticipants()
    {

        //$conference_id = $conference_id_test_value;

        //$talk = $talk_test_value;

        //$listen = $listen_test_value;

        //$dtmf_pass_through = $dtmf_pass_through_test_value;


        $response = static::$apiInstance->listParticipants($this->conference_id_listParticipants_test_value(), $this->talk_listParticipants_test_value(), $this->listen_listParticipants_test_value(), $this->dtmf_pass_through_listParticipants_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantList', $response);
    }

    /**
     * Test case for listRecordings
     *
     * List Recordings.
     *
     */
    public function testListRecordings()
    {

        //$call_id = $call_id_test_value;

        //$conference_id = $conference_id_test_value;

        //$date_created = $date_created_test_value;


        $response = static::$apiInstance->listRecordings($this->call_id_listRecordings_test_value(), $this->conference_id_listRecordings_test_value(), $this->date_created_listRecordings_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $response);
    }

    /**
     * Test case for listSmsMessages
     *
     * List SMS Messages.
     *
     */
    public function testListSmsMessages()
    {

        //$to = $to_test_value;

        //$from = $from_test_value;

        //$begin_time = $begin_time_test_value;

        //$end_time = $end_time_test_value;

        //$direction = $direction_test_value;

        //$campaign_id = $campaign_id_test_value;

        //$brand_id = $brand_id_test_value;

        //$is10_dlc = $is10_dlc_test_value;


        $response = static::$apiInstance->listSmsMessages($this->to_listSmsMessages_test_value(), $this->from_listSmsMessages_test_value(), $this->begin_time_listSmsMessages_test_value(), $this->end_time_listSmsMessages_test_value(), $this->direction_listSmsMessages_test_value(), $this->campaign_id_listSmsMessages_test_value(), $this->brand_id_listSmsMessages_test_value(), $this->is10_dlc_listSmsMessages_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessagesList', $response);
    }

    /**
     * Test case for makeACall
     *
     * Make a Call.
     *
     */
    public function testMakeACall()
    {

        //$make_call_request = $make_call_request_test_value;


        $response = static::$apiInstance->makeACall($this->make_call_request_makeACall_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallResult', $response);
    }

    /**
     * Test case for makeAWebrtcJwt
     *
     * Make a JWT for WebRTC calling.
     *
     */
    public function testMakeAWebrtcJwt()
    {

        //$create_web_rtc_token = $create_web_rtc_token_test_value;


        $response = static::$apiInstance->makeAWebrtcJwt($this->create_web_rtc_token_makeAWebrtcJwt_test_value());

        $this->assertIsString($response);
    }

    /**
     * Test case for modifyBlob
     *
     * Modify Blob.
     *
     */
    public function testModifyBlob()
    {

        //$blob_id = $blob_id_test_value;

        //$modify_blob_request = $modify_blob_request_test_value;


        $response = static::$apiInstance->modifyBlob($this->blob_id_modifyBlob_test_value(), $this->modify_blob_request_modifyBlob_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
    }

    /**
     * Test case for removeAParticipant
     *
     * Remove a Participant.
     *
     */
    public function testRemoveAParticipant()
    {

        //$conference_id = $conference_id_test_value;

        //$call_id = $call_id_test_value;


        $response = static::$apiInstance->removeAParticipant($this->conference_id_removeAParticipant_test_value(), $this->call_id_removeAParticipant_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for replaceBlob
     *
     * Replace Blob.
     *
     */
    public function testReplaceBlob()
    {

        //$blob_id = $blob_id_test_value;

        //$replace_blob_request = $replace_blob_request_test_value;


        $response = static::$apiInstance->replaceBlob($this->blob_id_replaceBlob_test_value(), $this->replace_blob_request_replaceBlob_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobResult', $response);
    }

    /**
     * Test case for sendAnSmsMessage
     *
     * Send an SMS Message.
     *
     */
    public function testSendAnSmsMessage()
    {

        //$message_request = $message_request_test_value;


        $response = static::$apiInstance->sendAnSmsMessage($this->message_request_sendAnSmsMessage_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessageResult', $response);
    }

    /**
     * Test case for streamARecordingFile
     *
     * Stream a Recording File.
     *
     */
    public function testStreamARecordingFile()
    {

        //$recording_id = $recording_id_test_value;


        $response = static::$apiInstance->streamARecordingFile($this->recording_id_streamARecordingFile_test_value());
        $this->assertInstanceOf('\SplFileObject', $response);
    }

    /**
     * Test case for updateAConference
     *
     * Update a Conference.
     *
     */
    public function testUpdateAConference()
    {

        //$conference_id = $conference_id_test_value;

        //$update_conference_request = $update_conference_request_test_value;


        $response = static::$apiInstance->updateAConference($this->conference_id_updateAConference_test_value(), $this->update_conference_request_updateAConference_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for updateALiveCall
     *
     * Update a Live Call.
     *
     */
    public function testUpdateALiveCall()
    {

        //$call_id = $call_id_test_value;

        //$update_call_request = $update_call_request_test_value;


        $response = static::$apiInstance->updateALiveCall($this->call_id_updateALiveCall_test_value(), $this->update_call_request_updateALiveCall_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for updateAParticipant
     *
     * Update a Participant.
     *
     */
    public function testUpdateAParticipant()
    {

        //$conference_id = $conference_id_test_value;

        //$call_id = $call_id_test_value;

        //$update_conference_participant_request = $update_conference_participant_request_test_value;


        $response = static::$apiInstance->updateAParticipant($this->conference_id_updateAParticipant_test_value(), $this->call_id_updateAParticipant_test_value(), $this->update_conference_participant_request_updateAParticipant_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantResult', $response);
    }

    /**
     * Test case for updateAQueue
     *
     * Update a Queue.
     *
     */
    public function testUpdateAQueue()
    {

        //$queue_id = $queue_id_test_value;

        //$queue_request = $queue_request_test_value;


        $response = static::$apiInstance->updateAQueue($this->queue_id_updateAQueue_test_value(), $this->queue_request_updateAQueue_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueResult', $response);
    }

    /**
     * Test case for updateAnAccount
     *
     * Manage an account.
     *
     */
    public function testUpdateAnAccount()
    {

        //$account_request = $account_request_test_value;


        $response = static::$apiInstance->updateAnAccount($this->account_request_updateAnAccount_test_value());
        $this->assertNull($response);
    }

    /**
     * Test case for updateAnApplication
     *
     * Update an application.
     *
     */
    public function testUpdateAnApplication()
    {

        //$application_id = $application_id_test_value;

        //$application_request = $application_request_test_value;


        $response = static::$apiInstance->updateAnApplication($this->application_id_updateAnApplication_test_value(), $this->application_request_updateAnApplication_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationResult', $response);
    }

    /**
     * Test case for updateAnIncomingNumber
     *
     * Update an Incoming Number.
     *
     */
    public function testUpdateAnIncomingNumber()
    {

        //$phone_number_id = $phone_number_id_test_value;

        //$incoming_number_request = $incoming_number_request_test_value;


        $response = static::$apiInstance->updateAnIncomingNumber($this->phone_number_id_updateAnIncomingNumber_test_value(), $this->incoming_number_request_updateAnIncomingNumber_test_value());
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberResult', $response);
    }
    /**
     * Test case for getNextPage of filterLogs
     *
     * Get next page of resource.
     */

    public function testGetNextPageFilterLogs()
    {
        $response = static::$apiInstance->filterLogs($this->filter_logs_request_filterLogs_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Logs?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of getTenDLCSmsBrands
     *
     * Get next page of resource.
     */

    public function testGetNextPageGetTenDLCSmsBrands()
    {
        $response = static::$apiInstance->getTenDLCSmsBrands();
        $response['next_page_uri'] = '/Accounts/{accountId}/Messages/10DLC/Brands?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCBrandsListResult', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of getTenDLCSmsCampaigns
     *
     * Get next page of resource.
     */

    public function testGetNextPageGetTenDLCSmsCampaigns()
    {
        $response = static::$apiInstance->getTenDLCSmsCampaigns($this->brand_id_getTenDLCSmsCampaigns_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Messages/10DLC/Campaigns?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCCampaignsListResult', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of getTenDLCSmsPartnerCampaigns
     *
     * Get next page of resource.
     */

    public function testGetNextPageGetTenDLCSmsPartnerCampaigns()
    {
        $response = static::$apiInstance->getTenDLCSmsPartnerCampaigns($this->brand_id_getTenDLCSmsPartnerCampaigns_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Messages/10DLC/PartnerCampaigns?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTenDLCPartnerCampaignsListResult', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of getTollFreeSmsCampaigns
     *
     * Get next page of resource.
     */

    public function testGetNextPageGetTollFreeSmsCampaigns()
    {
        $response = static::$apiInstance->getTollFreeSmsCampaigns();
        $response['next_page_uri'] = '/Accounts/{accountId}/Messages/TollFree/Campaigns?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\SMSTollFreeCampaignsListResult', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listActiveQueues
     *
     * Get next page of resource.
     */

    public function testGetNextPageListActiveQueues()
    {
        $response = static::$apiInstance->listActiveQueues($this->alias_listActiveQueues_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Queues?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listAllAccountLogs
     *
     * Get next page of resource.
     */

    public function testGetNextPageListAllAccountLogs()
    {
        $response = static::$apiInstance->listAllAccountLogs();
        $response['next_page_uri'] = '/Accounts/{accountId}/Logs?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listApplications
     *
     * Get next page of resource.
     */

    public function testGetNextPageListApplications()
    {
        $response = static::$apiInstance->listApplications($this->alias_listApplications_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Applications?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\ApplicationList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listAvailableNumbers
     *
     * Get next page of resource.
     */

    public function testGetNextPageListAvailableNumbers()
    {
        $response = static::$apiInstance->listAvailableNumbers($this->phone_number_listAvailableNumbers_test_value(), $this->region_listAvailableNumbers_test_value(), $this->country_listAvailableNumbers_test_value(), $this->voice_enabled_listAvailableNumbers_test_value(), $this->sms_enabled_listAvailableNumbers_test_value(), $this->capabilities_voice_listAvailableNumbers_test_value(), $this->capabilities_sms_listAvailableNumbers_test_value(), $this->capabilities_toll_free_listAvailableNumbers_test_value(), $this->capabilities_ten_dlc_listAvailableNumbers_test_value(), $this->capabilities_short_code_listAvailableNumbers_test_value());
        $response['next_page_uri'] = '/AvailablePhoneNumbers?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\AvailableNumberList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listBlobs
     *
     * Get next page of resource.
     */

    public function testGetNextPageListBlobs()
    {
        $response = static::$apiInstance->listBlobs($this->alias_listBlobs_test_value(), $this->cursor_listBlobs_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Blobs?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\BlobListResponse', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listCallLogs
     *
     * Get next page of resource.
     */

    public function testGetNextPageListCallLogs()
    {
        $response = static::$apiInstance->listCallLogs($this->call_id_listCallLogs_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Calls/{callId}/Logs?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\LogList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listCallRecordings
     *
     * Get next page of resource.
     */

    public function testGetNextPageListCallRecordings()
    {
        $response = static::$apiInstance->listCallRecordings($this->call_id_listCallRecordings_test_value(), $this->date_created_listCallRecordings_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Calls/{callId}/Recordings?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listCalls
     *
     * Get next page of resource.
     */

    public function testGetNextPageListCalls()
    {
        $response = static::$apiInstance->listCalls($this->active_listCalls_test_value(), $this->to_listCalls_test_value(), $this->from_listCalls_test_value(), $this->status_listCalls_test_value(), $this->start_time_listCalls_test_value(), $this->end_time_listCalls_test_value(), $this->parent_call_id_listCalls_test_value(), $this->application_id_listCalls_test_value(), $this->risk_score_min_listCalls_test_value(), $this->risk_score_max_listCalls_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Calls?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\CallList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listConferenceRecordings
     *
     * Get next page of resource.
     */

    public function testGetNextPageListConferenceRecordings()
    {
        $response = static::$apiInstance->listConferenceRecordings($this->conference_id_listConferenceRecordings_test_value(), $this->call_id_listConferenceRecordings_test_value(), $this->date_created_listConferenceRecordings_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Conferences/{conferenceId}/Recordings?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listConferences
     *
     * Get next page of resource.
     */

    public function testGetNextPageListConferences()
    {
        $response = static::$apiInstance->listConferences($this->status_listConferences_test_value(), $this->alias_listConferences_test_value(), $this->date_created_listConferences_test_value(), $this->date_updated_listConferences_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Conferences?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listExports
     *
     * Get next page of resource.
     */

    public function testGetNextPageListExports()
    {
        $response = static::$apiInstance->listExports($this->status_listExports_test_value(), $this->cursor_listExports_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Exports?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\ExportList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listIncomingNumbers
     *
     * Get next page of resource.
     */

    public function testGetNextPageListIncomingNumbers()
    {
        $response = static::$apiInstance->listIncomingNumbers($this->phone_number_listIncomingNumbers_test_value(), $this->alias_listIncomingNumbers_test_value(), $this->region_listIncomingNumbers_test_value(), $this->country_listIncomingNumbers_test_value(), $this->application_id_listIncomingNumbers_test_value(), $this->has_application_listIncomingNumbers_test_value(), $this->has_campaign_listIncomingNumbers_test_value(), $this->capabilities_voice_listIncomingNumbers_test_value(), $this->capabilities_sms_listIncomingNumbers_test_value(), $this->capabilities_toll_free_listIncomingNumbers_test_value(), $this->capabilities_ten_dlc_listIncomingNumbers_test_value(), $this->capabilities_short_code_listIncomingNumbers_test_value(), $this->tfn_campaign_id_listIncomingNumbers_test_value(), $this->offnet_listIncomingNumbers_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/IncomingPhoneNumbers?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\IncomingNumberList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listMembers
     *
     * Get next page of resource.
     */

    public function testGetNextPageListMembers()
    {
        $response = static::$apiInstance->listMembers($this->queue_id_listMembers_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Queues/{queueId}/Members?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\QueueMemberList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listParticipants
     *
     * Get next page of resource.
     */

    public function testGetNextPageListParticipants()
    {
        $response = static::$apiInstance->listParticipants($this->conference_id_listParticipants_test_value(), $this->talk_listParticipants_test_value(), $this->listen_listParticipants_test_value(), $this->dtmf_pass_through_listParticipants_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Conferences/{conferenceId}/Participants?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\ConferenceParticipantList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listRecordings
     *
     * Get next page of resource.
     */

    public function testGetNextPageListRecordings()
    {
        $response = static::$apiInstance->listRecordings($this->call_id_listRecordings_test_value(), $this->conference_id_listRecordings_test_value(), $this->date_created_listRecordings_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Recordings?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\RecordingList', $nextPageResponse);
    }
    /**
     * Test case for getNextPage of listSmsMessages
     *
     * Get next page of resource.
     */

    public function testGetNextPageListSmsMessages()
    {
        $response = static::$apiInstance->listSmsMessages($this->to_listSmsMessages_test_value(), $this->from_listSmsMessages_test_value(), $this->begin_time_listSmsMessages_test_value(), $this->end_time_listSmsMessages_test_value(), $this->direction_listSmsMessages_test_value(), $this->campaign_id_listSmsMessages_test_value(), $this->brand_id_listSmsMessages_test_value(), $this->is10_dlc_listSmsMessages_test_value());
        $response['next_page_uri'] = '/Accounts/{accountId}/Messages?cursor=1';
        $nextPageResponse = static::$apiInstance->getNextPage($response);
        $this->assertInstanceOf('\FreeClimb\Api\Model\MessagesList',$nextPageResponse);
    }

}
