<?php

/**
 * LanguageTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto-generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use FreeClimb\Api\Model\Language;
use PHPUnit\Framework\TestCase;

/**
 * LanguageTest Class Doc Comment
 *
 * @category    Class
 * @description Language
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class LanguageTest extends TestCase
{
    protected $Language;

    /**
     * Test "Language"
     */
    public function setUp() : void
    {
        $this->Language = new Language();
    }

public function test_CATALAN_should_deserialize_to_string() {
    $test = Language::CATALAN;
    $this->assertEquals($test, 'ca-ES');
}


public function test_DANISH_should_deserialize_to_string() {
    $test = Language::DANISH;
    $this->assertEquals($test, 'da-DK');
}


public function test_GERMAN_should_deserialize_to_string() {
    $test = Language::GERMAN;
    $this->assertEquals($test, 'de-DE');
}


public function test_ENGLISH_AU_should_deserialize_to_string() {
    $test = Language::ENGLISH_AU;
    $this->assertEquals($test, 'en-AU');
}


public function test_ENGLISH_CA_should_deserialize_to_string() {
    $test = Language::ENGLISH_CA;
    $this->assertEquals($test, 'en-CA');
}


public function test_ENGLISH_UK_should_deserialize_to_string() {
    $test = Language::ENGLISH_UK;
    $this->assertEquals($test, 'en-GB');
}


public function test_ENGLISH_IN_should_deserialize_to_string() {
    $test = Language::ENGLISH_IN;
    $this->assertEquals($test, 'en-IN');
}


public function test_ENGLISH_US_should_deserialize_to_string() {
    $test = Language::ENGLISH_US;
    $this->assertEquals($test, 'en-US');
}


public function test_ENGLISH_ES_should_deserialize_to_string() {
    $test = Language::ENGLISH_ES;
    $this->assertEquals($test, 'es-ES');
}


public function test_ENGLISH_MX_should_deserialize_to_string() {
    $test = Language::ENGLISH_MX;
    $this->assertEquals($test, 'es-MX');
}


public function test_FINNISH_should_deserialize_to_string() {
    $test = Language::FINNISH;
    $this->assertEquals($test, 'fi-FI');
}


public function test_FRENCH_CA_should_deserialize_to_string() {
    $test = Language::FRENCH_CA;
    $this->assertEquals($test, 'fr-CA');
}


public function test_FRENCH_FR_should_deserialize_to_string() {
    $test = Language::FRENCH_FR;
    $this->assertEquals($test, 'fr-FR');
}


public function test_ITALIAN_should_deserialize_to_string() {
    $test = Language::ITALIAN;
    $this->assertEquals($test, 'it-IT');
}


public function test_JAPANESE_should_deserialize_to_string() {
    $test = Language::JAPANESE;
    $this->assertEquals($test, 'ja-JP');
}


public function test_KOREAN_should_deserialize_to_string() {
    $test = Language::KOREAN;
    $this->assertEquals($test, 'ko-KR');
}


public function test_NORWEGIAN_should_deserialize_to_string() {
    $test = Language::NORWEGIAN;
    $this->assertEquals($test, 'nb-NO');
}


public function test_DUTCH_should_deserialize_to_string() {
    $test = Language::DUTCH;
    $this->assertEquals($test, 'nl-NL');
}


public function test_POLISH_should_deserialize_to_string() {
    $test = Language::POLISH;
    $this->assertEquals($test, 'pl-PL');
}


public function test_PORTUGESE_BR_should_deserialize_to_string() {
    $test = Language::PORTUGESE_BR;
    $this->assertEquals($test, 'pt-BR');
}


public function test_PORTUGESE_PT_should_deserialize_to_string() {
    $test = Language::PORTUGESE_PT;
    $this->assertEquals($test, 'pt-PT');
}


public function test_RUSSIAN_should_deserialize_to_string() {
    $test = Language::RUSSIAN;
    $this->assertEquals($test, 'ru-RU');
}


public function test_SWEDISH_should_deserialize_to_string() {
    $test = Language::SWEDISH;
    $this->assertEquals($test, 'sv-SE');
}


public function test_CHINESE_CN_should_deserialize_to_string() {
    $test = Language::CHINESE_CN;
    $this->assertEquals($test, 'zh-CN');
}


public function test_CHINESE_HK_should_deserialize_to_string() {
    $test = Language::CHINESE_HK;
    $this->assertEquals($test, 'zh-HK');
}


public function test_CHINESE_TW_should_deserialize_to_string() {
    $test = Language::CHINESE_TW;
    $this->assertEquals($test, 'zh-TW');
}


}
