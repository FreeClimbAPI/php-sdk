<?php

/**
 * ParkTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto-generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use FreeClimb\Api\Model\Park;
use PHPUnit\Framework\TestCase;

/**
 * ParkTest Class Doc Comment
 *
 * @category    Class
 * @description The &#x60;Park&#x60; command allows a caller to be put on hold.  You can provide hold music,messages,etc until ready to resume the call. Park is a terminal command.  Actions performed on the Call while on hold are provided in a PerCL script in response to the waitUrl property. Actions performed on the Call after it has been unparked (resumed) will be provided in a PerCL script in response to the actionUrl provided. A Call can be resumed in two ways -- REST API invocation or the Unpark percl command. No actions can be nested within Park and Park cannot be nested in any other actions.
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ParkTest extends TestCase
{
    protected $Park;

    /**
     * Test "Park"
     */
    public function setUp() : void
    {
        $this->Park = new Park();
    }
    /**
     * Test attribute "wait_url"
     */
    public function testPropertyWaitUrl()
    {
        $this->Park->setWaitUrl('TEST_STRING');
        $this->assertEquals('TEST_STRING', $this->Park->getWaitUrl());
        $this->assertIsString($this->Park->getWaitUrl());
        

    }
    /**
     * Test attribute "action_url"
     */
    public function testPropertyActionUrl()
    {
        $this->Park->setActionUrl('TEST_STRING');
        $this->assertEquals('TEST_STRING', $this->Park->getActionUrl());
        $this->assertIsString($this->Park->getActionUrl());
        

    }
    /**
     * Test attribute "notification_url"
     */
    public function testPropertyNotificationUrl()
    {
        $this->Park->setNotificationUrl('TEST_STRING');
        $this->assertEquals('TEST_STRING', $this->Park->getNotificationUrl());
        $this->assertIsString($this->Park->getNotificationUrl());
        

    }

    /**
* Test attribute toStringTest
*/
public function toStringTest() {
    $test1 = new Park();    
      try {
          $uri1 = "TEST_STRING";
          $test1->setWaitUrl($uri1);
      } catch (Exception $e) {
          echo $e->getMessage();
      }
      try {
          $uri1 = "TEST_STRING";
          $test1->setActionUrl($uri1);
      } catch (Exception $e) {
          echo $e->getMessage();
      }
      $test1->setNotificationUrl("TS");

    $toString1 = $test1->__toString();
    assert(is_string($toString1));
}

/**
 * Test attribute toHeaderValue
 */
public function toHeaderValueTest()
{
    $test1 = new Park();
      try {
          $uri1 = "TEST_STRING";
          $test1->setWaitUrl($uri1);
      } catch (Exception $e) {
          echo $e->getMessage();
      }
      try {
          $uri1 = "TEST_STRING";
          $test1->setActionUrl($uri1);
      } catch (Exception $e) {
          echo $e->getMessage();
      }
      $test1->setNotificationUrl("TS");

    $toHeaderValue1 = $test1->toHeaderValue();
    assert(is_string($toHeaderValue1));
}


}
