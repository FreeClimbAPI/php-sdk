<?php

/**
 * GetSpeechTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetSpeechTest Class Doc Comment
 *
 * @category    Class
 * @description The &#x60;GetSpeech&#x60; command enables the Caller to respond to the application using a supported language. Unlike DTMF entry, which implicitly restricts the user to using the available buttons on the phone key pad, speech input allows for flexible audio inputs based on grammar. FreeClimb supports grammars written using GRXML compatible with the Microsoft Speech Platform. &#x60;GetSpeech&#x60; is only supported on a single call leg. It is not supported when there are two or more call legs connected (as in within a Conference).
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
#[\AllowDynamicProperties]
class GetSpeechTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->GetSpeech = new \FreeClimb\Api\Model\GetSpeech();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test attribute "action_url"
     */
    public function testPropertyActionUrl()
    {
        $this->GetSpeech->setActionUrl('TS');
        $this->assertEquals('TS', $this->GetSpeech->getActionUrl());
        $this->assertIsString($this->GetSpeech->getActionUrl());
    }
    /**
     * Test attribute "grammar_type"
     */
    public function testPropertyGrammarType()
    {
        $this->GetSpeech->setgrammarType(\FreeClimb\Api\Model\GrammarType::URL);
        $this->assertEquals(\FreeClimb\Api\Model\GrammarType::URL, $this->GetSpeech->getgrammarType());
        $this->GetSpeech->setgrammarType(\FreeClimb\Api\Model\GrammarType::BUILT_IN);
        $this->assertEquals(\FreeClimb\Api\Model\GrammarType::BUILT_IN, $this->GetSpeech->getgrammarType());
    }
    /**
     * Test attribute "grammar_file"
     */
    public function testPropertyGrammarFile()
    {
        $this->GetSpeech->setGrammarFile('TS');
        $this->assertEquals('TS', $this->GetSpeech->getGrammarFile());
        $this->assertIsString($this->GetSpeech->getGrammarFile());
    }
    /**
     * Test attribute "grammar_rule"
     */
    public function testPropertyGrammarRule()
    {
        $this->GetSpeech->setGrammarRule('TS');
        $this->assertEquals('TS', $this->GetSpeech->getGrammarRule());
        $this->assertIsString($this->GetSpeech->getGrammarRule());
    }
    /**
     * Test attribute "play_beep"
     */
    public function testPropertyPlayBeep()
    {
        $this->GetSpeech->setplayBeep(false);
        $this->assertFalse($this->GetSpeech->getplayBeep());
        $this->assertIsBool($this->GetSpeech->getplayBeep());
    }
    /**
     * Test attribute "prompts"
     */
    public function testPropertyPrompts()
    {
        $this->GetSpeech->setprompts([]);
        $this->assertEquals([], $this->GetSpeech->getprompts());
        $this->assertIsArray($this->GetSpeech->getprompts());
    }
    /**
     * Test attribute "no_input_timeout_ms"
     */
    public function testPropertyNoInputTimeoutMs()
    {


        $this->GetSpeech->setnoInputTimeoutMs(1);
        $this->assertEquals(1, $this->GetSpeech->getnoInputTimeoutMs());
        $this->assertIsNumeric($this->GetSpeech->getnoInputTimeoutMs());

    }
    /**
     * Test attribute "recognition_timeout_ms"
     */
    public function testPropertyRecognitionTimeoutMs()
    {


        $this->GetSpeech->setrecognitionTimeoutMs(1);
        $this->assertEquals(1, $this->GetSpeech->getrecognitionTimeoutMs());
        $this->assertIsNumeric($this->GetSpeech->getrecognitionTimeoutMs());

    }
    /**
     * Test attribute "confidence_threshold"
     */
    public function testPropertyConfidenceThreshold()
    {


        $this->GetSpeech->setconfidenceThreshold(1);
        $this->assertEquals(1, $this->GetSpeech->getconfidenceThreshold());
        $this->assertIsNumeric($this->GetSpeech->getconfidenceThreshold());

    }
    /**
     * Test attribute "sensitivity_level"
     */
    public function testPropertySensitivityLevel()
    {


        $this->GetSpeech->setsensitivityLevel(1);
        $this->assertEquals(1, $this->GetSpeech->getsensitivityLevel());
        $this->assertIsNumeric($this->GetSpeech->getsensitivityLevel());

    }
    /**
     * Test attribute "speech_complete_timeout_ms"
     */
    public function testPropertySpeechCompleteTimeoutMs()
    {


        $this->GetSpeech->setspeechCompleteTimeoutMs(1);
        $this->assertEquals(1, $this->GetSpeech->getspeechCompleteTimeoutMs());
        $this->assertIsNumeric($this->GetSpeech->getspeechCompleteTimeoutMs());

    }
    /**
     * Test attribute "speech_incomplete_timeout_ms"
     */
    public function testPropertySpeechIncompleteTimeoutMs()
    {


        $this->GetSpeech->setspeechIncompleteTimeoutMs(1);
        $this->assertEquals(1, $this->GetSpeech->getspeechIncompleteTimeoutMs());
        $this->assertIsNumeric($this->GetSpeech->getspeechIncompleteTimeoutMs());

    }
    /**
     * Test attribute "privacy_mode"
     */
    public function testPropertyPrivacyMode()
    {
        $this->GetSpeech->setprivacyMode(false);
        $this->assertFalse($this->GetSpeech->getprivacyMode());
        $this->assertIsBool($this->GetSpeech->getprivacyMode());
    }
}
