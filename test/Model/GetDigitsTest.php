<?php

/**
 * GetDigitsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * GetDigitsTest Class Doc Comment
 *
 * @category    Class
 * @description The &#x60;GetDigits&#x60; command collects DTMF inputs from the caller. It is only supported only when there is a single party on the Call. &#x60;GetDigits&#x60; is a Terminal Command â€” any actions following it are never executed. When the Caller is done entering the digits, FreeClimb submits that data to the provided &#x60;actionUrl&#x60; using an HTTP POST request. Your server will be required to respond to the FreeClimb Webhook with PerCL to continue handling the call.
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
#[\AllowDynamicProperties]
class GetDigitsTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->GetDigits = new \FreeClimb\Api\Model\GetDigits();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test attribute "action_url"
     */
    public function testPropertyActionUrl()
    {

        $this->GetDigits->setActionUrl('TS');
        $this->assertEquals('TS', $this->GetDigits->getActionUrl());
        $this->assertIsString($this->GetDigits->getActionUrl());
    }
    /**
     * Test attribute "digit_timeout_ms"
     */
    public function testPropertyDigitTimeoutMs()
    {


        $this->GetDigits->setdigitTimeoutMs(1);
        $this->assertEquals(1, $this->GetDigits->getdigitTimeoutMs());
        $this->assertIsNumeric($this->GetDigits->getdigitTimeoutMs());

    }
    /**
     * Test attribute "finish_on_key"
     */
    public function testPropertyFinishOnKey()
    {

        $this->GetDigits->setFinishOnKey('TS');
        $this->assertEquals('TS', $this->GetDigits->getFinishOnKey());
        $this->assertIsString($this->GetDigits->getFinishOnKey());
    }
    /**
     * Test attribute "flush_buffer"
     */
    public function testPropertyFlushBuffer()
    {
        $this->GetDigits->setflushBuffer(false);
        $this->assertFalse($this->GetDigits->getflushBuffer());
        $this->assertIsBool($this->GetDigits->getflushBuffer());
    }
    /**
     * Test attribute "initial_timeout_ms"
     */
    public function testPropertyInitialTimeoutMs()
    {


        $this->GetDigits->setinitialTimeoutMs(1);
        $this->assertEquals(1, $this->GetDigits->getinitialTimeoutMs());
        $this->assertIsNumeric($this->GetDigits->getinitialTimeoutMs());

    }
    /**
     * Test attribute "max_digits"
     */
    public function testPropertyMaxDigits()
    {


        $this->GetDigits->setmaxDigits(1);
        $this->assertEquals(1, $this->GetDigits->getmaxDigits());
        $this->assertIsNumeric($this->GetDigits->getmaxDigits());

    }
    /**
     * Test attribute "min_digits"
     */
    public function testPropertyMinDigits()
    {


        $this->GetDigits->setminDigits(1);
        $this->assertEquals(1, $this->GetDigits->getminDigits());
        $this->assertIsNumeric($this->GetDigits->getminDigits());

    }
    /**
     * Test attribute "prompts"
     */
    public function testPropertyPrompts()
    {
        $this->GetDigits->setprompts([]);
        $this->assertEquals([], $this->GetDigits->getprompts());
        $this->assertIsArray($this->GetDigits->getprompts());
    }
    /**
     * Test attribute "privacy_mode"
     */
    public function testPropertyPrivacyMode()
    {
        $this->GetDigits->setprivacyMode(false);
        $this->assertFalse($this->GetDigits->getprivacyMode());
        $this->assertIsBool($this->GetDigits->getprivacyMode());
    }
}
