<?php

/**
 * ConferenceResultTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ConferenceResultTest Class Doc Comment
 *
 * @category    Class
 * @description ConferenceResult
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
#[\AllowDynamicProperties]
class ConferenceResultTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->ConferenceResult = new \FreeClimb\Api\Model\ConferenceResult();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test attribute "uri"
     */
    public function testPropertyUri()
    {

        $this->ConferenceResult->setUri('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getUri());
        $this->assertIsString($this->ConferenceResult->getUri());
    }
    /**
     * Test attribute "date_created"
     */
    public function testPropertyDateCreated()
    {

        $this->ConferenceResult->setDateCreated('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getDateCreated());
        $this->assertIsString($this->ConferenceResult->getDateCreated());
    }
    /**
     * Test attribute "date_updated"
     */
    public function testPropertyDateUpdated()
    {

        $this->ConferenceResult->setDateUpdated('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getDateUpdated());
        $this->assertIsString($this->ConferenceResult->getDateUpdated());
    }
    /**
     * Test attribute "revision"
     */
    public function testPropertyRevision()
    {


        $this->ConferenceResult->setrevision(1);
        $this->assertEquals(1, $this->ConferenceResult->getrevision());
        $this->assertIsNumeric($this->ConferenceResult->getrevision());

    }
    /**
     * Test attribute "conference_id"
     */
    public function testPropertyConferenceId()
    {

        $this->ConferenceResult->setConferenceId('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getConferenceId());
        $this->assertIsString($this->ConferenceResult->getConferenceId());
    }
    /**
     * Test attribute "account_id"
     */
    public function testPropertyAccountId()
    {

        $this->ConferenceResult->setAccountId('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getAccountId());
        $this->assertIsString($this->ConferenceResult->getAccountId());
    }
    /**
     * Test attribute "alias"
     */
    public function testPropertyAlias()
    {

        $this->ConferenceResult->setAlias('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getAlias());
        $this->assertIsString($this->ConferenceResult->getAlias());
    }
    /**
     * Test attribute "play_beep"
     */
    public function testPropertyPlayBeep()
    {
        $this->ConferenceResult->setplayBeep(\FreeClimb\Api\Model\PlayBeep::ALWAYS);
        $this->assertEquals(\FreeClimb\Api\Model\PlayBeep::ALWAYS, $this->ConferenceResult->getplayBeep());
        $this->ConferenceResult->setplayBeep(\FreeClimb\Api\Model\PlayBeep::NEVER);
        $this->assertEquals(\FreeClimb\Api\Model\PlayBeep::NEVER, $this->ConferenceResult->getplayBeep());
        $this->ConferenceResult->setplayBeep(\FreeClimb\Api\Model\PlayBeep::ENTRY_ONLY);
        $this->assertEquals(\FreeClimb\Api\Model\PlayBeep::ENTRY_ONLY, $this->ConferenceResult->getplayBeep());
        $this->ConferenceResult->setplayBeep(\FreeClimb\Api\Model\PlayBeep::EXIT_ONLY);
        $this->assertEquals(\FreeClimb\Api\Model\PlayBeep::EXIT_ONLY, $this->ConferenceResult->getplayBeep());
    }
    /**
     * Test attribute "record"
     */
    public function testPropertyRecord()
    {
        $this->ConferenceResult->setrecord(false);
        $this->assertFalse($this->ConferenceResult->getrecord());
        $this->assertIsBool($this->ConferenceResult->getrecord());
    }
    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        $this->ConferenceResult->setstatus(\FreeClimb\Api\Model\ConferenceStatus::EMPTY);
        $this->assertEquals(\FreeClimb\Api\Model\ConferenceStatus::EMPTY, $this->ConferenceResult->getstatus());
        $this->ConferenceResult->setstatus(\FreeClimb\Api\Model\ConferenceStatus::POPULATED);
        $this->assertEquals(\FreeClimb\Api\Model\ConferenceStatus::POPULATED, $this->ConferenceResult->getstatus());
        $this->ConferenceResult->setstatus(\FreeClimb\Api\Model\ConferenceStatus::IN_PROGRESS);
        $this->assertEquals(\FreeClimb\Api\Model\ConferenceStatus::IN_PROGRESS, $this->ConferenceResult->getstatus());
        $this->ConferenceResult->setstatus(\FreeClimb\Api\Model\ConferenceStatus::TERMINATED);
        $this->assertEquals(\FreeClimb\Api\Model\ConferenceStatus::TERMINATED, $this->ConferenceResult->getstatus());
    }
    /**
     * Test attribute "wait_url"
     */
    public function testPropertyWaitUrl()
    {

        $this->ConferenceResult->setWaitUrl('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getWaitUrl());
        $this->assertIsString($this->ConferenceResult->getWaitUrl());
    }
    /**
     * Test attribute "action_url"
     */
    public function testPropertyActionUrl()
    {

        $this->ConferenceResult->setActionUrl('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getActionUrl());
        $this->assertIsString($this->ConferenceResult->getActionUrl());
    }
    /**
     * Test attribute "status_callback_url"
     */
    public function testPropertyStatusCallbackUrl()
    {

        $this->ConferenceResult->setStatusCallbackUrl('TS');
        $this->assertEquals('TS', $this->ConferenceResult->getStatusCallbackUrl());
        $this->assertIsString($this->ConferenceResult->getStatusCallbackUrl());
    }
    /**
     * Test attribute "subresource_uris"
     */
    public function testPropertySubresourceUris()
    {
        $this->ConferenceResult->setsubresourceUris(new \stdClass());
        $this->assertInstanceOf(\stdClass::class, $this->ConferenceResult->getsubresourceUris());
    }
}
