<?php

/**
 * SMSTenDLCPartnerCampaignBrandTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * SMSTenDLCPartnerCampaignBrandTest Class Doc Comment
 *
 * @category    Class
 * @description SMSTenDLCPartnerCampaignBrand
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
#[\AllowDynamicProperties]
class SMSTenDLCPartnerCampaignBrandTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->SMSTenDLCPartnerCampaignBrand = new \FreeClimb\Api\Model\SMSTenDLCPartnerCampaignBrand();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test attribute "account_id"
     */
    public function testPropertyAccountId()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setAccountId('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getAccountId());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getAccountId());
    }
    /**
     * Test attribute "brand_id"
     */
    public function testPropertyBrandId()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setBrandId('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getBrandId());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getBrandId());
    }
    /**
     * Test attribute "first_name"
     */
    public function testPropertyFirstName()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setFirstName('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getFirstName());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getFirstName());
    }
    /**
     * Test attribute "last_name"
     */
    public function testPropertyLastName()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setLastName('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getLastName());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getLastName());
    }
    /**
     * Test attribute "display_name"
     */
    public function testPropertyDisplayName()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setDisplayName('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getDisplayName());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getDisplayName());
    }
    /**
     * Test attribute "company_name"
     */
    public function testPropertyCompanyName()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setCompanyName('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getCompanyName());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getCompanyName());
    }
    /**
     * Test attribute "phone"
     */
    public function testPropertyPhone()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setPhone('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getPhone());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getPhone());
    }
    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setEmail('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getEmail());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getEmail());
    }
    /**
     * Test attribute "website"
     */
    public function testPropertyWebsite()
    {

        $this->SMSTenDLCPartnerCampaignBrand->setWebsite('TS');
        $this->assertEquals('TS', $this->SMSTenDLCPartnerCampaignBrand->getWebsite());
        $this->assertIsString($this->SMSTenDLCPartnerCampaignBrand->getWebsite());
    }
    /**
     * Test attribute "optional_attributes"
     */
    public function testPropertyOptionalAttributes()
    {
        $this->SMSTenDLCPartnerCampaignBrand->setoptionalAttributes(new \stdClass());
        $this->assertInstanceOf(\stdClass::class, $this->SMSTenDLCPartnerCampaignBrand->getoptionalAttributes());
    }
    /**
     * Test attribute "evp_vetting_score"
     */
    public function testPropertyEvpVettingScore()
    {


        $this->SMSTenDLCPartnerCampaignBrand->setevpVettingScore(1);
        $this->assertEquals(1, $this->SMSTenDLCPartnerCampaignBrand->getevpVettingScore());
        $this->assertIsNumeric($this->SMSTenDLCPartnerCampaignBrand->getevpVettingScore());

    }
}
