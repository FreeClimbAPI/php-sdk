<?php

/**
 * TranscribeWebhookTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FreeClimb\Api\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * TranscribeWebhookTest Class Doc Comment
 *
 * @category    Class
 * @description TranscribeWebhook
 * @package     FreeClimb\Api
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
#[\AllowDynamicProperties]
class TranscribeWebhookTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->TranscribeWebhook = new \FreeClimb\Api\Model\TranscribeWebhook();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test attribute "request_type"
     */
    public function testPropertyRequestType()
    {

        $this->TranscribeWebhook->setRequestType('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getRequestType());
        $this->assertIsString($this->TranscribeWebhook->getRequestType());
    }
    /**
     * Test attribute "account_id"
     */
    public function testPropertyAccountId()
    {

        $this->TranscribeWebhook->setAccountId('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getAccountId());
        $this->assertIsString($this->TranscribeWebhook->getAccountId());
    }
    /**
     * Test attribute "call_id"
     */
    public function testPropertyCallId()
    {

        $this->TranscribeWebhook->setCallId('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getCallId());
        $this->assertIsString($this->TranscribeWebhook->getCallId());
    }
    /**
     * Test attribute "from"
     */
    public function testPropertyFrom()
    {

        $this->TranscribeWebhook->setFrom('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getFrom());
        $this->assertIsString($this->TranscribeWebhook->getFrom());
    }
    /**
     * Test attribute "to"
     */
    public function testPropertyTo()
    {

        $this->TranscribeWebhook->setTo('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getTo());
        $this->assertIsString($this->TranscribeWebhook->getTo());
    }
    /**
     * Test attribute "recording_id"
     */
    public function testPropertyRecordingId()
    {

        $this->TranscribeWebhook->setRecordingId('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getRecordingId());
        $this->assertIsString($this->TranscribeWebhook->getRecordingId());
    }
    /**
     * Test attribute "recording_url"
     */
    public function testPropertyRecordingUrl()
    {

        $this->TranscribeWebhook->setRecordingUrl('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getRecordingUrl());
        $this->assertIsString($this->TranscribeWebhook->getRecordingUrl());
    }
    /**
     * Test attribute "recording_size"
     */
    public function testPropertyRecordingSize()
    {


        $this->TranscribeWebhook->setrecordingSize(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getrecordingSize());
        $this->assertIsNumeric($this->TranscribeWebhook->getrecordingSize());

    }
    /**
     * Test attribute "recording_format"
     */
    public function testPropertyRecordingFormat()
    {

        $this->TranscribeWebhook->setRecordingFormat('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getRecordingFormat());
        $this->assertIsString($this->TranscribeWebhook->getRecordingFormat());
    }
    /**
     * Test attribute "recording_duration_ms"
     */
    public function testPropertyRecordingDurationMs()
    {


        $this->TranscribeWebhook->setrecordingDurationMs(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getrecordingDurationMs());
        $this->assertIsNumeric($this->TranscribeWebhook->getrecordingDurationMs());

    }
    /**
     * Test attribute "term_reason"
     */
    public function testPropertyTermReason()
    {
        $this->TranscribeWebhook->settermReason(\FreeClimb\Api\Model\TranscribeTermReason::ERROR);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeTermReason::ERROR, $this->TranscribeWebhook->gettermReason());
        $this->TranscribeWebhook->settermReason(\FreeClimb\Api\Model\TranscribeTermReason::COMPLETED);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeTermReason::COMPLETED, $this->TranscribeWebhook->gettermReason());
    }
    /**
     * Test attribute "record_term_reason"
     */
    public function testPropertyRecordTermReason()
    {
        $this->TranscribeWebhook->setrecordTermReason(\FreeClimb\Api\Model\RecordUtteranceTermReason::FINISH_KEY);
        $this->assertEquals(\FreeClimb\Api\Model\RecordUtteranceTermReason::FINISH_KEY, $this->TranscribeWebhook->getrecordTermReason());
        $this->TranscribeWebhook->setrecordTermReason(\FreeClimb\Api\Model\RecordUtteranceTermReason::TIMEOUT);
        $this->assertEquals(\FreeClimb\Api\Model\RecordUtteranceTermReason::TIMEOUT, $this->TranscribeWebhook->getrecordTermReason());
        $this->TranscribeWebhook->setrecordTermReason(\FreeClimb\Api\Model\RecordUtteranceTermReason::HANGUP);
        $this->assertEquals(\FreeClimb\Api\Model\RecordUtteranceTermReason::HANGUP, $this->TranscribeWebhook->getrecordTermReason());
        $this->TranscribeWebhook->setrecordTermReason(\FreeClimb\Api\Model\RecordUtteranceTermReason::MAX_LENGTH);
        $this->assertEquals(\FreeClimb\Api\Model\RecordUtteranceTermReason::MAX_LENGTH, $this->TranscribeWebhook->getrecordTermReason());
    }
    /**
     * Test attribute "digit"
     */
    public function testPropertyDigit()
    {

        $this->TranscribeWebhook->setDigit('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getDigit());
        $this->assertIsString($this->TranscribeWebhook->getDigit());
    }
    /**
     * Test attribute "privacy_for_logging"
     */
    public function testPropertyPrivacyForLogging()
    {
        $this->TranscribeWebhook->setprivacyForLogging(false);
        $this->assertFalse($this->TranscribeWebhook->getprivacyForLogging());
        $this->assertIsBool($this->TranscribeWebhook->getprivacyForLogging());
    }
    /**
     * Test attribute "privacy_for_recording"
     */
    public function testPropertyPrivacyForRecording()
    {
        $this->TranscribeWebhook->setprivacyForRecording(false);
        $this->assertFalse($this->TranscribeWebhook->getprivacyForRecording());
        $this->assertIsBool($this->TranscribeWebhook->getprivacyForRecording());
    }
    /**
     * Test attribute "barge_in_reason"
     */
    public function testPropertyBargeInReason()
    {
        $this->TranscribeWebhook->setbargeInReason(\FreeClimb\Api\Model\BargeInReason::NO_BARGE_IN);
        $this->assertEquals(\FreeClimb\Api\Model\BargeInReason::NO_BARGE_IN, $this->TranscribeWebhook->getbargeInReason());
        $this->TranscribeWebhook->setbargeInReason(\FreeClimb\Api\Model\BargeInReason::BARGE_IN_BY_DTMF);
        $this->assertEquals(\FreeClimb\Api\Model\BargeInReason::BARGE_IN_BY_DTMF, $this->TranscribeWebhook->getbargeInReason());
        $this->TranscribeWebhook->setbargeInReason(\FreeClimb\Api\Model\BargeInReason::BARGE_IN_BY_ENERGY);
        $this->assertEquals(\FreeClimb\Api\Model\BargeInReason::BARGE_IN_BY_ENERGY, $this->TranscribeWebhook->getbargeInReason());
    }
    /**
     * Test attribute "barged_in_prompt_no"
     */
    public function testPropertyBargedInPromptNo()
    {


        $this->TranscribeWebhook->setbargedInPromptNo(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getbargedInPromptNo());
        $this->assertIsNumeric($this->TranscribeWebhook->getbargedInPromptNo());

    }
    /**
     * Test attribute "barged_in_prompt_ms"
     */
    public function testPropertyBargedInPromptMs()
    {


        $this->TranscribeWebhook->setbargedInPromptMs(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getbargedInPromptMs());
        $this->assertIsNumeric($this->TranscribeWebhook->getbargedInPromptMs());

    }
    /**
     * Test attribute "barged_in_prompt_loop_no"
     */
    public function testPropertyBargedInPromptLoopNo()
    {


        $this->TranscribeWebhook->setbargedInPromptLoopNo(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getbargedInPromptLoopNo());
        $this->assertIsNumeric($this->TranscribeWebhook->getbargedInPromptLoopNo());

    }
    /**
     * Test attribute "barge_in_time_ms"
     */
    public function testPropertyBargeInTimeMs()
    {


        $this->TranscribeWebhook->setbargeInTimeMs(1);
        $this->assertEquals(1, $this->TranscribeWebhook->getbargeInTimeMs());
        $this->assertIsNumeric($this->TranscribeWebhook->getbargeInTimeMs());

    }
    /**
     * Test attribute "transcript"
     */
    public function testPropertyTranscript()
    {

        $this->TranscribeWebhook->setTranscript('TS');
        $this->assertEquals('TS', $this->TranscribeWebhook->getTranscript());
        $this->assertIsString($this->TranscribeWebhook->getTranscript());
    }
    /**
     * Test attribute "transcribe_reason"
     */
    public function testPropertyTranscribeReason()
    {
        $this->TranscribeWebhook->settranscribeReason(\FreeClimb\Api\Model\TranscribeReason::INTERNAL_ERROR);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeReason::INTERNAL_ERROR, $this->TranscribeWebhook->gettranscribeReason());
        $this->TranscribeWebhook->settranscribeReason(\FreeClimb\Api\Model\TranscribeReason::HANGUP);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeReason::HANGUP, $this->TranscribeWebhook->gettranscribeReason());
        $this->TranscribeWebhook->settranscribeReason(\FreeClimb\Api\Model\TranscribeReason::MAX_LENGTH);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeReason::MAX_LENGTH, $this->TranscribeWebhook->gettranscribeReason());
        $this->TranscribeWebhook->settranscribeReason(\FreeClimb\Api\Model\TranscribeReason::DIGIT);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeReason::DIGIT, $this->TranscribeWebhook->gettranscribeReason());
        $this->TranscribeWebhook->settranscribeReason(\FreeClimb\Api\Model\TranscribeReason::NO_INPUT);
        $this->assertEquals(\FreeClimb\Api\Model\TranscribeReason::NO_INPUT, $this->TranscribeWebhook->gettranscribeReason());
    }
    /**
     * Test attribute "transcription_duration_ms"
     */
    public function testPropertyTranscriptionDurationMs()
    {


        $this->TranscribeWebhook->settranscriptionDurationMs(1);
        $this->assertEquals(1, $this->TranscribeWebhook->gettranscriptionDurationMs());
        $this->assertIsNumeric($this->TranscribeWebhook->gettranscriptionDurationMs());

    }
    /**
     * Test attribute "TranscribeWebhook::deserialize"
     */
    public function testDeserializeTranscribeWebhook()
    {
        $json = "{\"requestType\":\"transcribe\"}";
        $this->assertInstanceOf(\FreeClimb\Api\Model\TranscribeWebhook::class, \FreeClimb\Api\Model\TranscribeWebhook::deserialize($json));
    }
}
