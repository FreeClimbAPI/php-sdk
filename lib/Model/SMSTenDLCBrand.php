<?php
/**
 * SMSTenDLCBrand
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FreeClimb\Api\Model;

use \ArrayAccess;
use \FreeClimb\Api\ObjectSerializer;

/**
 * SMSTenDLCBrand Class Doc Comment
 *
 * @category Class
 * @description A brand is a business identity behind the campaign.
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SMSTenDLCBrand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SMSTenDLCBrand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'entity_type' => 'string',
        'csp_id' => 'string',
        'brand_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'display_name' => 'string',
        'company_name' => 'string',
        'ein' => 'string',
        'ein_issuing_country' => 'string',
        'phone' => 'string',
        'street' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'email' => 'string',
        'stock_symbol' => 'string',
        'stock_exchange' => 'string',
        'ip_address' => 'string',
        'website' => 'string',
        'brand_relationship' => 'string',
        'vertical' => 'string',
        'alt_business_id' => 'string',
        'alt_business_id_type' => 'string',
        'universal_ein' => 'string',
        'reference_id' => 'string',
        'optional_attributes' => 'array<string,object>',
        'mock' => 'bool',
        'identity_status' => 'string',
        'create_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'entity_type' => null,
        'csp_id' => null,
        'brand_id' => null,
        'first_name' => null,
        'last_name' => null,
        'display_name' => null,
        'company_name' => null,
        'ein' => null,
        'ein_issuing_country' => null,
        'phone' => null,
        'street' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'email' => null,
        'stock_symbol' => null,
        'stock_exchange' => null,
        'ip_address' => null,
        'website' => null,
        'brand_relationship' => null,
        'vertical' => null,
        'alt_business_id' => null,
        'alt_business_id_type' => null,
        'universal_ein' => null,
        'reference_id' => null,
        'optional_attributes' => null,
        'mock' => null,
        'identity_status' => null,
        'create_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'entity_type' => 'entityType',
        'csp_id' => 'cspId',
        'brand_id' => 'brandId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'display_name' => 'displayName',
        'company_name' => 'companyName',
        'ein' => 'ein',
        'ein_issuing_country' => 'einIssuingCountry',
        'phone' => 'phone',
        'street' => 'street',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'email' => 'email',
        'stock_symbol' => 'stockSymbol',
        'stock_exchange' => 'stockExchange',
        'ip_address' => 'ipAddress',
        'website' => 'website',
        'brand_relationship' => 'brandRelationship',
        'vertical' => 'vertical',
        'alt_business_id' => 'altBusinessId',
        'alt_business_id_type' => 'altBusinessIdType',
        'universal_ein' => 'universalEin',
        'reference_id' => 'referenceId',
        'optional_attributes' => 'optionalAttributes',
        'mock' => 'mock',
        'identity_status' => 'identityStatus',
        'create_date' => 'createDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'entity_type' => 'setEntityType',
        'csp_id' => 'setCspId',
        'brand_id' => 'setBrandId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'display_name' => 'setDisplayName',
        'company_name' => 'setCompanyName',
        'ein' => 'setEin',
        'ein_issuing_country' => 'setEinIssuingCountry',
        'phone' => 'setPhone',
        'street' => 'setStreet',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'email' => 'setEmail',
        'stock_symbol' => 'setStockSymbol',
        'stock_exchange' => 'setStockExchange',
        'ip_address' => 'setIpAddress',
        'website' => 'setWebsite',
        'brand_relationship' => 'setBrandRelationship',
        'vertical' => 'setVertical',
        'alt_business_id' => 'setAltBusinessId',
        'alt_business_id_type' => 'setAltBusinessIdType',
        'universal_ein' => 'setUniversalEin',
        'reference_id' => 'setReferenceId',
        'optional_attributes' => 'setOptionalAttributes',
        'mock' => 'setMock',
        'identity_status' => 'setIdentityStatus',
        'create_date' => 'setCreateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'entity_type' => 'getEntityType',
        'csp_id' => 'getCspId',
        'brand_id' => 'getBrandId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'display_name' => 'getDisplayName',
        'company_name' => 'getCompanyName',
        'ein' => 'getEin',
        'ein_issuing_country' => 'getEinIssuingCountry',
        'phone' => 'getPhone',
        'street' => 'getStreet',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'email' => 'getEmail',
        'stock_symbol' => 'getStockSymbol',
        'stock_exchange' => 'getStockExchange',
        'ip_address' => 'getIpAddress',
        'website' => 'getWebsite',
        'brand_relationship' => 'getBrandRelationship',
        'vertical' => 'getVertical',
        'alt_business_id' => 'getAltBusinessId',
        'alt_business_id_type' => 'getAltBusinessIdType',
        'universal_ein' => 'getUniversalEin',
        'reference_id' => 'getReferenceId',
        'optional_attributes' => 'getOptionalAttributes',
        'mock' => 'getMock',
        'identity_status' => 'getIdentityStatus',
        'create_date' => 'getCreateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ENTITY_TYPE_PRIVATE_PROFIT = 'PRIVATE_PROFIT';
    const ENTITY_TYPE_PUBLIC_PROFIT = 'PUBLIC_PROFIT';
    const ENTITY_TYPE_NON_PROFIT = 'NON_PROFIT';
    const ENTITY_TYPE_GOVERNMENT = 'GOVERNMENT';
    const ENTITY_TYPE_SOLE_PROPRIETOR = 'SOLE_PROPRIETOR';
    const STOCK_EXCHANGE_NONE = 'NONE';
    const STOCK_EXCHANGE_NASDAQ = 'NASDAQ';
    const STOCK_EXCHANGE_NYSE = 'NYSE';
    const STOCK_EXCHANGE_AMEX = 'AMEX';
    const STOCK_EXCHANGE_AMX = 'AMX';
    const STOCK_EXCHANGE_ASX = 'ASX';
    const STOCK_EXCHANGE_B3 = 'B3';
    const STOCK_EXCHANGE_BME = 'BME';
    const STOCK_EXCHANGE_BSE = 'BSE';
    const STOCK_EXCHANGE_FRA = 'FRA';
    const STOCK_EXCHANGE_ICEX = 'ICEX';
    const STOCK_EXCHANGE_JPX = 'JPX';
    const STOCK_EXCHANGE_JSE = 'JSE';
    const STOCK_EXCHANGE_KRX = 'KRX';
    const STOCK_EXCHANGE_LON = 'LON';
    const STOCK_EXCHANGE_NSE = 'NSE';
    const STOCK_EXCHANGE_OMX = 'OMX';
    const STOCK_EXCHANGE_SEHK = 'SEHK';
    const STOCK_EXCHANGE_SGX = 'SGX';
    const STOCK_EXCHANGE_SSE = 'SSE';
    const STOCK_EXCHANGE_STO = 'STO';
    const STOCK_EXCHANGE_SWX = 'SWX';
    const STOCK_EXCHANGE_SZSE = 'SZSE';
    const STOCK_EXCHANGE_TSX = 'TSX';
    const STOCK_EXCHANGE_TWSE = 'TWSE';
    const STOCK_EXCHANGE_VSE = 'VSE';
    const STOCK_EXCHANGE_OTHER = 'OTHER';
    const BRAND_RELATIONSHIP_BASIC_ACCOUNT = 'BASIC_ACCOUNT';
    const BRAND_RELATIONSHIP_SMALL_ACCOUNT = 'SMALL_ACCOUNT';
    const BRAND_RELATIONSHIP_MEDIUM_ACCOUNT = 'MEDIUM_ACCOUNT';
    const BRAND_RELATIONSHIP_LARGE_ACCOUNT = 'LARGE_ACCOUNT';
    const BRAND_RELATIONSHIP_KEY_ACCOUNT = 'KEY_ACCOUNT';
    const ALT_BUSINESS_ID_TYPE_NONE = 'NONE';
    const ALT_BUSINESS_ID_TYPE_DUNS = 'DUNS';
    const ALT_BUSINESS_ID_TYPE_GIIN = 'GIIN';
    const ALT_BUSINESS_ID_TYPE_LEI = 'LEI';
    const IDENTITY_STATUS_SELF_DECLARED = 'SELF_DECLARED';
    const IDENTITY_STATUS_UNVERIFIED = 'UNVERIFIED';
    const IDENTITY_STATUS_VERIFIED = 'VERIFIED';
    const IDENTITY_STATUS_VETTED_VERIFIED = 'VETTED_VERIFIED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_PRIVATE_PROFIT,
            self::ENTITY_TYPE_PUBLIC_PROFIT,
            self::ENTITY_TYPE_NON_PROFIT,
            self::ENTITY_TYPE_GOVERNMENT,
            self::ENTITY_TYPE_SOLE_PROPRIETOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockExchangeAllowableValues()
    {
        return [
            self::STOCK_EXCHANGE_NONE,
            self::STOCK_EXCHANGE_NASDAQ,
            self::STOCK_EXCHANGE_NYSE,
            self::STOCK_EXCHANGE_AMEX,
            self::STOCK_EXCHANGE_AMX,
            self::STOCK_EXCHANGE_ASX,
            self::STOCK_EXCHANGE_B3,
            self::STOCK_EXCHANGE_BME,
            self::STOCK_EXCHANGE_BSE,
            self::STOCK_EXCHANGE_FRA,
            self::STOCK_EXCHANGE_ICEX,
            self::STOCK_EXCHANGE_JPX,
            self::STOCK_EXCHANGE_JSE,
            self::STOCK_EXCHANGE_KRX,
            self::STOCK_EXCHANGE_LON,
            self::STOCK_EXCHANGE_NSE,
            self::STOCK_EXCHANGE_OMX,
            self::STOCK_EXCHANGE_SEHK,
            self::STOCK_EXCHANGE_SGX,
            self::STOCK_EXCHANGE_SSE,
            self::STOCK_EXCHANGE_STO,
            self::STOCK_EXCHANGE_SWX,
            self::STOCK_EXCHANGE_SZSE,
            self::STOCK_EXCHANGE_TSX,
            self::STOCK_EXCHANGE_TWSE,
            self::STOCK_EXCHANGE_VSE,
            self::STOCK_EXCHANGE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBrandRelationshipAllowableValues()
    {
        return [
            self::BRAND_RELATIONSHIP_BASIC_ACCOUNT,
            self::BRAND_RELATIONSHIP_SMALL_ACCOUNT,
            self::BRAND_RELATIONSHIP_MEDIUM_ACCOUNT,
            self::BRAND_RELATIONSHIP_LARGE_ACCOUNT,
            self::BRAND_RELATIONSHIP_KEY_ACCOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAltBusinessIdTypeAllowableValues()
    {
        return [
            self::ALT_BUSINESS_ID_TYPE_NONE,
            self::ALT_BUSINESS_ID_TYPE_DUNS,
            self::ALT_BUSINESS_ID_TYPE_GIIN,
            self::ALT_BUSINESS_ID_TYPE_LEI,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityStatusAllowableValues()
    {
        return [
            self::IDENTITY_STATUS_SELF_DECLARED,
            self::IDENTITY_STATUS_UNVERIFIED,
            self::IDENTITY_STATUS_VERIFIED,
            self::IDENTITY_STATUS_VETTED_VERIFIED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['entity_type'] = $data['entity_type'] ?? null;
        $this->container['csp_id'] = $data['csp_id'] ?? null;
        $this->container['brand_id'] = $data['brand_id'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['ein'] = $data['ein'] ?? null;
        $this->container['ein_issuing_country'] = $data['ein_issuing_country'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['stock_symbol'] = $data['stock_symbol'] ?? null;
        $this->container['stock_exchange'] = $data['stock_exchange'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['brand_relationship'] = $data['brand_relationship'] ?? null;
        $this->container['vertical'] = $data['vertical'] ?? null;
        $this->container['alt_business_id'] = $data['alt_business_id'] ?? null;
        $this->container['alt_business_id_type'] = $data['alt_business_id_type'] ?? null;
        $this->container['universal_ein'] = $data['universal_ein'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['optional_attributes'] = $data['optional_attributes'] ?? null;
        $this->container['mock'] = $data['mock'] ?? null;
        $this->container['identity_status'] = $data['identity_status'] ?? null;
        $this->container['create_date'] = $data['create_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entity_type']) && !in_array($this->container['entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entity_type', must be one of '%s'",
                $this->container['entity_type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['entity_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'entity_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ein']) && (mb_strlen($this->container['ein']) > 21)) {
            $invalidProperties[] = "invalid value for 'ein', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['ein_issuing_country']) && (mb_strlen($this->container['ein_issuing_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'ein_issuing_country', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ((mb_strlen($this->container['phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 100)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 100)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 20)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 100)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['stock_symbol']) && (mb_strlen($this->container['stock_symbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'stock_symbol', the character length must be smaller than or equal to 10.";
        }

        $allowedValues = $this->getStockExchangeAllowableValues();
        if (!is_null($this->container['stock_exchange']) && !in_array($this->container['stock_exchange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stock_exchange', must be one of '%s'",
                $this->container['stock_exchange'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) > 50)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 100)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['brand_relationship'] === null) {
            $invalidProperties[] = "'brand_relationship' can't be null";
        }
        $allowedValues = $this->getBrandRelationshipAllowableValues();
        if (!is_null($this->container['brand_relationship']) && !in_array($this->container['brand_relationship'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'brand_relationship', must be one of '%s'",
                $this->container['brand_relationship'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vertical'] === null) {
            $invalidProperties[] = "'vertical' can't be null";
        }
        if ((mb_strlen($this->container['vertical']) > 50)) {
            $invalidProperties[] = "invalid value for 'vertical', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['alt_business_id']) && (mb_strlen($this->container['alt_business_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'alt_business_id', the character length must be smaller than or equal to 50.";
        }

        $allowedValues = $this->getAltBusinessIdTypeAllowableValues();
        if (!is_null($this->container['alt_business_id_type']) && !in_array($this->container['alt_business_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'alt_business_id_type', must be one of '%s'",
                $this->container['alt_business_id_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reference_id']) && (mb_strlen($this->container['reference_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'reference_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['mock'] === null) {
            $invalidProperties[] = "'mock' can't be null";
        }
        if ($this->container['identity_status'] === null) {
            $invalidProperties[] = "'identity_status' can't be null";
        }
        $allowedValues = $this->getIdentityStatusAllowableValues();
        if (!is_null($this->container['identity_status']) && !in_array($this->container['identity_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_status', must be one of '%s'",
                $this->container['identity_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID of the account that created this Queue.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type Entity type behind the brand. This is the form of business establishment.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entity_type', must be one of '%s'",
                    $entity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($entity_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $entity_type when calling SMSTenDLCBrand., must be smaller than or equal to 20.');
        }

        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets csp_id
     *
     * @return string|null
     */
    public function getCspId()
    {
        return $this->container['csp_id'];
    }

    /**
     * Sets csp_id
     *
     * @param string|null $csp_id Unique identifier assigned to the csp by the registry.
     *
     * @return self
     */
    public function setCspId($csp_id)
    {
        $this->container['csp_id'] = $csp_id;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id Unique identifier assigned to the brand by the registry.
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First or given name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last or Surname.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Display or marketing name of the brand.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if ((mb_strlen($display_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling SMSTenDLCBrand., must be smaller than or equal to 255.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name (Required for Non-profit/private/public) Legal company name.
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (!is_null($company_name) && (mb_strlen($company_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling SMSTenDLCBrand., must be smaller than or equal to 255.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein (Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.
     *
     * @return self
     */
    public function setEin($ein)
    {
        if (!is_null($ein) && (mb_strlen($ein) > 21)) {
            throw new \InvalidArgumentException('invalid length for $ein when calling SMSTenDLCBrand., must be smaller than or equal to 21.');
        }

        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets ein_issuing_country
     *
     * @return string|null
     */
    public function getEinIssuingCountry()
    {
        return $this->container['ein_issuing_country'];
    }

    /**
     * Sets ein_issuing_country
     *
     * @param string|null $ein_issuing_country ISO2 2 characters country code. Example: US - United States
     *
     * @return self
     */
    public function setEinIssuingCountry($ein_issuing_country)
    {
        if (!is_null($ein_issuing_country) && (mb_strlen($ein_issuing_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ein_issuing_country when calling SMSTenDLCBrand., must be smaller than or equal to 2.');
        }

        $this->container['ein_issuing_country'] = $ein_issuing_country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Valid phone number in e.164 international format.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if ((mb_strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling SMSTenDLCBrand., must be smaller than or equal to 20.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Street number and name.
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (mb_strlen($street) > 100)) {
            throw new \InvalidArgumentException('invalid length for $street when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City name
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State. Must be 2 letters code for United States.
     *
     * @return self
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 20)) {
            throw new \InvalidArgumentException('invalid length for $state when calling SMSTenDLCBrand., must be smaller than or equal to 20.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal codes. Use 5 digit zipcode for United States
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling SMSTenDLCBrand., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country ISO2 2 characters country code. Example: US - United States
     *
     * @return self
     */
    public function setCountry($country)
    {
        if ((mb_strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling SMSTenDLCBrand., must be smaller than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Valid email address of brand support contact.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $email when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets stock_symbol
     *
     * @return string|null
     */
    public function getStockSymbol()
    {
        return $this->container['stock_symbol'];
    }

    /**
     * Sets stock_symbol
     *
     * @param string|null $stock_symbol (Required for public company) stock symbol.
     *
     * @return self
     */
    public function setStockSymbol($stock_symbol)
    {
        if (!is_null($stock_symbol) && (mb_strlen($stock_symbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $stock_symbol when calling SMSTenDLCBrand., must be smaller than or equal to 10.');
        }

        $this->container['stock_symbol'] = $stock_symbol;

        return $this;
    }

    /**
     * Gets stock_exchange
     *
     * @return string|null
     */
    public function getStockExchange()
    {
        return $this->container['stock_exchange'];
    }

    /**
     * Sets stock_exchange
     *
     * @param string|null $stock_exchange (Required for public company) stock exchange.
     *
     * @return self
     */
    public function setStockExchange($stock_exchange)
    {
        $allowedValues = $this->getStockExchangeAllowableValues();
        if (!is_null($stock_exchange) && !in_array($stock_exchange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stock_exchange', must be one of '%s'",
                    $stock_exchange,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock_exchange'] = $stock_exchange;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address IP address of the browser requesting to create brand identity.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (!is_null($ip_address) && (mb_strlen($ip_address) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling SMSTenDLCBrand., must be smaller than or equal to 50.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Brand website URL.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 100)) {
            throw new \InvalidArgumentException('invalid length for $website when calling SMSTenDLCBrand., must be smaller than or equal to 100.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets brand_relationship
     *
     * @return string
     */
    public function getBrandRelationship()
    {
        return $this->container['brand_relationship'];
    }

    /**
     * Sets brand_relationship
     *
     * @param string $brand_relationship Brand relationship to the CSP
     *
     * @return self
     */
    public function setBrandRelationship($brand_relationship)
    {
        $allowedValues = $this->getBrandRelationshipAllowableValues();
        if (!in_array($brand_relationship, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'brand_relationship', must be one of '%s'",
                    $brand_relationship,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['brand_relationship'] = $brand_relationship;

        return $this;
    }

    /**
     * Gets vertical
     *
     * @return string
     */
    public function getVertical()
    {
        return $this->container['vertical'];
    }

    /**
     * Sets vertical
     *
     * @param string $vertical Vertical or industry segment of the brand.
     *
     * @return self
     */
    public function setVertical($vertical)
    {
        if ((mb_strlen($vertical) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vertical when calling SMSTenDLCBrand., must be smaller than or equal to 50.');
        }

        $this->container['vertical'] = $vertical;

        return $this;
    }

    /**
     * Gets alt_business_id
     *
     * @return string|null
     */
    public function getAltBusinessId()
    {
        return $this->container['alt_business_id'];
    }

    /**
     * Sets alt_business_id
     *
     * @param string|null $alt_business_id Alternate business identifier such as DUNS, LEI, or GIIN
     *
     * @return self
     */
    public function setAltBusinessId($alt_business_id)
    {
        if (!is_null($alt_business_id) && (mb_strlen($alt_business_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alt_business_id when calling SMSTenDLCBrand., must be smaller than or equal to 50.');
        }

        $this->container['alt_business_id'] = $alt_business_id;

        return $this;
    }

    /**
     * Gets alt_business_id_type
     *
     * @return string|null
     */
    public function getAltBusinessIdType()
    {
        return $this->container['alt_business_id_type'];
    }

    /**
     * Sets alt_business_id_type
     *
     * @param string|null $alt_business_id_type The type of the Alternative business identifier
     *
     * @return self
     */
    public function setAltBusinessIdType($alt_business_id_type)
    {
        $allowedValues = $this->getAltBusinessIdTypeAllowableValues();
        if (!is_null($alt_business_id_type) && !in_array($alt_business_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'alt_business_id_type', must be one of '%s'",
                    $alt_business_id_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['alt_business_id_type'] = $alt_business_id_type;

        return $this;
    }

    /**
     * Gets universal_ein
     *
     * @return string|null
     */
    public function getUniversalEin()
    {
        return $this->container['universal_ein'];
    }

    /**
     * Sets universal_ein
     *
     * @param string|null $universal_ein Universal EIN of Brand, Read Only.
     *
     * @return self
     */
    public function setUniversalEin($universal_ein)
    {
        $this->container['universal_ein'] = $universal_ein;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (!is_null($reference_id) && (mb_strlen($reference_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference_id when calling SMSTenDLCBrand., must be smaller than or equal to 50.');
        }

        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets optional_attributes
     *
     * @return array<string,object>|null
     */
    public function getOptionalAttributes()
    {
        return $this->container['optional_attributes'];
    }

    /**
     * Sets optional_attributes
     *
     * @param array<string,object>|null $optional_attributes Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.
     *
     * @return self
     */
    public function setOptionalAttributes($optional_attributes)
    {
        $this->container['optional_attributes'] = $optional_attributes;

        return $this;
    }

    /**
     * Gets mock
     *
     * @return bool
     */
    public function getMock()
    {
        return $this->container['mock'];
    }

    /**
     * Sets mock
     *
     * @param bool $mock Test brand.
     *
     * @return self
     */
    public function setMock($mock)
    {
        $this->container['mock'] = $mock;

        return $this;
    }

    /**
     * Gets identity_status
     *
     * @return string
     */
    public function getIdentityStatus()
    {
        return $this->container['identity_status'];
    }

    /**
     * Sets identity_status
     *
     * @param string $identity_status TCR assessment of the brand identification status.
     *
     * @return self
     */
    public function setIdentityStatus($identity_status)
    {
        $allowedValues = $this->getIdentityStatusAllowableValues();
        if (!in_array($identity_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_status', must be one of '%s'",
                    $identity_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_status'] = $identity_status;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date Unix timestamp when brand was created.
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


