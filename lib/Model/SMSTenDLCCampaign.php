<?php
/**
 * SMSTenDLCCampaign
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FreeClimb\Api\Model;

use \ArrayAccess;
use \FreeClimb\Api\ObjectSerializer;

/**
 * SMSTenDLCCampaign Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SMSTenDLCCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SMSTenDLCCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'campaign_id' => 'string',
        'csp_id' => 'string',
        'reseller_id' => 'string',
        'status' => 'string',
        'create_date' => '\DateTime',
        'auto_renewal' => 'bool',
        'billed_date' => '\DateTime',
        'brand_id' => 'string',
        'usecase' => 'string',
        'sub_usecases' => 'string[]',
        'description' => 'string',
        'embedded_link' => 'bool',
        'embedded_phone' => 'bool',
        'affiliate_marketing' => 'bool',
        'number_pool' => 'bool',
        'age_gated' => 'bool',
        'direct_lending' => 'bool',
        'subscriber_optin' => 'bool',
        'subscriber_optout' => 'bool',
        'subscriber_help' => 'bool',
        'sample1' => 'string',
        'sample2' => 'string',
        'sample3' => 'string',
        'sample4' => 'string',
        'sample5' => 'string',
        'message_flow' => 'string',
        'help_message' => 'string',
        'reference_id' => 'string',
        'mock' => 'bool',
        'next_renewal_or_expiration_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'campaign_id' => null,
        'csp_id' => null,
        'reseller_id' => null,
        'status' => null,
        'create_date' => 'date-time',
        'auto_renewal' => null,
        'billed_date' => 'date-time',
        'brand_id' => null,
        'usecase' => null,
        'sub_usecases' => null,
        'description' => null,
        'embedded_link' => null,
        'embedded_phone' => null,
        'affiliate_marketing' => null,
        'number_pool' => null,
        'age_gated' => null,
        'direct_lending' => null,
        'subscriber_optin' => null,
        'subscriber_optout' => null,
        'subscriber_help' => null,
        'sample1' => null,
        'sample2' => null,
        'sample3' => null,
        'sample4' => null,
        'sample5' => null,
        'message_flow' => null,
        'help_message' => null,
        'reference_id' => null,
        'mock' => null,
        'next_renewal_or_expiration_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'campaign_id' => 'campaignId',
        'csp_id' => 'cspId',
        'reseller_id' => 'resellerId',
        'status' => 'status',
        'create_date' => 'createDate',
        'auto_renewal' => 'autoRenewal',
        'billed_date' => 'billedDate',
        'brand_id' => 'brandId',
        'usecase' => 'usecase',
        'sub_usecases' => 'subUsecases',
        'description' => 'description',
        'embedded_link' => 'embeddedLink',
        'embedded_phone' => 'embeddedPhone',
        'affiliate_marketing' => 'affiliateMarketing',
        'number_pool' => 'numberPool',
        'age_gated' => 'ageGated',
        'direct_lending' => 'directLending',
        'subscriber_optin' => 'subscriberOptin',
        'subscriber_optout' => 'subscriberOptout',
        'subscriber_help' => 'subscriberHelp',
        'sample1' => 'sample1',
        'sample2' => 'sample2',
        'sample3' => 'sample3',
        'sample4' => 'sample4',
        'sample5' => 'sample5',
        'message_flow' => 'messageFlow',
        'help_message' => 'helpMessage',
        'reference_id' => 'referenceId',
        'mock' => 'mock',
        'next_renewal_or_expiration_date' => 'nextRenewalOrExpirationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'campaign_id' => 'setCampaignId',
        'csp_id' => 'setCspId',
        'reseller_id' => 'setResellerId',
        'status' => 'setStatus',
        'create_date' => 'setCreateDate',
        'auto_renewal' => 'setAutoRenewal',
        'billed_date' => 'setBilledDate',
        'brand_id' => 'setBrandId',
        'usecase' => 'setUsecase',
        'sub_usecases' => 'setSubUsecases',
        'description' => 'setDescription',
        'embedded_link' => 'setEmbeddedLink',
        'embedded_phone' => 'setEmbeddedPhone',
        'affiliate_marketing' => 'setAffiliateMarketing',
        'number_pool' => 'setNumberPool',
        'age_gated' => 'setAgeGated',
        'direct_lending' => 'setDirectLending',
        'subscriber_optin' => 'setSubscriberOptin',
        'subscriber_optout' => 'setSubscriberOptout',
        'subscriber_help' => 'setSubscriberHelp',
        'sample1' => 'setSample1',
        'sample2' => 'setSample2',
        'sample3' => 'setSample3',
        'sample4' => 'setSample4',
        'sample5' => 'setSample5',
        'message_flow' => 'setMessageFlow',
        'help_message' => 'setHelpMessage',
        'reference_id' => 'setReferenceId',
        'mock' => 'setMock',
        'next_renewal_or_expiration_date' => 'setNextRenewalOrExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'campaign_id' => 'getCampaignId',
        'csp_id' => 'getCspId',
        'reseller_id' => 'getResellerId',
        'status' => 'getStatus',
        'create_date' => 'getCreateDate',
        'auto_renewal' => 'getAutoRenewal',
        'billed_date' => 'getBilledDate',
        'brand_id' => 'getBrandId',
        'usecase' => 'getUsecase',
        'sub_usecases' => 'getSubUsecases',
        'description' => 'getDescription',
        'embedded_link' => 'getEmbeddedLink',
        'embedded_phone' => 'getEmbeddedPhone',
        'affiliate_marketing' => 'getAffiliateMarketing',
        'number_pool' => 'getNumberPool',
        'age_gated' => 'getAgeGated',
        'direct_lending' => 'getDirectLending',
        'subscriber_optin' => 'getSubscriberOptin',
        'subscriber_optout' => 'getSubscriberOptout',
        'subscriber_help' => 'getSubscriberHelp',
        'sample1' => 'getSample1',
        'sample2' => 'getSample2',
        'sample3' => 'getSample3',
        'sample4' => 'getSample4',
        'sample5' => 'getSample5',
        'message_flow' => 'getMessageFlow',
        'help_message' => 'getHelpMessage',
        'reference_id' => 'getReferenceId',
        'mock' => 'getMock',
        'next_renewal_or_expiration_date' => 'getNextRenewalOrExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_EXPIRED = 'EXPIRED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_EXPIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['csp_id'] = $data['csp_id'] ?? null;
        $this->container['reseller_id'] = $data['reseller_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['create_date'] = $data['create_date'] ?? null;
        $this->container['auto_renewal'] = $data['auto_renewal'] ?? null;
        $this->container['billed_date'] = $data['billed_date'] ?? null;
        $this->container['brand_id'] = $data['brand_id'] ?? null;
        $this->container['usecase'] = $data['usecase'] ?? null;
        $this->container['sub_usecases'] = $data['sub_usecases'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['embedded_link'] = $data['embedded_link'] ?? false;
        $this->container['embedded_phone'] = $data['embedded_phone'] ?? false;
        $this->container['affiliate_marketing'] = $data['affiliate_marketing'] ?? null;
        $this->container['number_pool'] = $data['number_pool'] ?? false;
        $this->container['age_gated'] = $data['age_gated'] ?? null;
        $this->container['direct_lending'] = $data['direct_lending'] ?? null;
        $this->container['subscriber_optin'] = $data['subscriber_optin'] ?? false;
        $this->container['subscriber_optout'] = $data['subscriber_optout'] ?? false;
        $this->container['subscriber_help'] = $data['subscriber_help'] ?? false;
        $this->container['sample1'] = $data['sample1'] ?? null;
        $this->container['sample2'] = $data['sample2'] ?? null;
        $this->container['sample3'] = $data['sample3'] ?? null;
        $this->container['sample4'] = $data['sample4'] ?? null;
        $this->container['sample5'] = $data['sample5'] ?? null;
        $this->container['message_flow'] = $data['message_flow'] ?? null;
        $this->container['help_message'] = $data['help_message'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['mock'] = $data['mock'] ?? null;
        $this->container['next_renewal_or_expiration_date'] = $data['next_renewal_or_expiration_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['campaign_id'] === null) {
            $invalidProperties[] = "'campaign_id' can't be null";
        }
        if ($this->container['csp_id'] === null) {
            $invalidProperties[] = "'csp_id' can't be null";
        }
        if (!is_null($this->container['reseller_id']) && (mb_strlen($this->container['reseller_id']) > 8)) {
            $invalidProperties[] = "invalid value for 'reseller_id', the character length must be smaller than or equal to 8.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['brand_id'] === null) {
            $invalidProperties[] = "'brand_id' can't be null";
        }
        if ((mb_strlen($this->container['brand_id']) > 8)) {
            $invalidProperties[] = "invalid value for 'brand_id', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['usecase'] === null) {
            $invalidProperties[] = "'usecase' can't be null";
        }
        if ((mb_strlen($this->container['usecase']) > 20)) {
            $invalidProperties[] = "invalid value for 'usecase', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['sub_usecases'] === null) {
            $invalidProperties[] = "'sub_usecases' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if (!is_null($this->container['sample1']) && (mb_strlen($this->container['sample1']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sample1', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sample2']) && (mb_strlen($this->container['sample2']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sample2', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sample3']) && (mb_strlen($this->container['sample3']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sample3', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sample4']) && (mb_strlen($this->container['sample4']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sample4', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['sample5']) && (mb_strlen($this->container['sample5']) > 1024)) {
            $invalidProperties[] = "invalid value for 'sample5', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['message_flow']) && (mb_strlen($this->container['message_flow']) > 2048)) {
            $invalidProperties[] = "invalid value for 'message_flow', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['help_message']) && (mb_strlen($this->container['help_message']) > 255)) {
            $invalidProperties[] = "invalid value for 'help_message', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference_id']) && (mb_strlen($this->container['reference_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'reference_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['mock'] === null) {
            $invalidProperties[] = "'mock' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id ID of the account that created this Queue.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets csp_id
     *
     * @return string
     */
    public function getCspId()
    {
        return $this->container['csp_id'];
    }

    /**
     * Sets csp_id
     *
     * @param string $csp_id Alphanumeric identifier of the CSP associated with this campaign.
     *
     * @return self
     */
    public function setCspId($csp_id)
    {
        $this->container['csp_id'] = $csp_id;

        return $this;
    }

    /**
     * Gets reseller_id
     *
     * @return string|null
     */
    public function getResellerId()
    {
        return $this->container['reseller_id'];
    }

    /**
     * Sets reseller_id
     *
     * @param string|null $reseller_id Alphanumeric identifier of the reseller that you want to associate with this campaign.
     *
     * @return self
     */
    public function setResellerId($reseller_id)
    {
        if (!is_null($reseller_id) && (mb_strlen($reseller_id) > 8)) {
            throw new \InvalidArgumentException('invalid length for $reseller_id when calling SMSTenDLCCampaign., must be smaller than or equal to 8.');
        }

        $this->container['reseller_id'] = $reseller_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date Unix timestamp when campaign was created.
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets auto_renewal
     *
     * @return bool|null
     */
    public function getAutoRenewal()
    {
        return $this->container['auto_renewal'];
    }

    /**
     * Sets auto_renewal
     *
     * @param bool|null $auto_renewal Campaign subscription auto-renewal status.
     *
     * @return self
     */
    public function setAutoRenewal($auto_renewal)
    {
        $this->container['auto_renewal'] = $auto_renewal;

        return $this;
    }

    /**
     * Gets billed_date
     *
     * @return \DateTime|null
     */
    public function getBilledDate()
    {
        return $this->container['billed_date'];
    }

    /**
     * Sets billed_date
     *
     * @param \DateTime|null $billed_date Campaign recent billed date.
     *
     * @return self
     */
    public function setBilledDate($billed_date)
    {
        $this->container['billed_date'] = $billed_date;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string $brand_id Alphanumeric identifier of the brand associated with this campaign.
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if ((mb_strlen($brand_id) > 8)) {
            throw new \InvalidArgumentException('invalid length for $brand_id when calling SMSTenDLCCampaign., must be smaller than or equal to 8.');
        }

        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets usecase
     *
     * @return string
     */
    public function getUsecase()
    {
        return $this->container['usecase'];
    }

    /**
     * Sets usecase
     *
     * @param string $usecase Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
     *
     * @return self
     */
    public function setUsecase($usecase)
    {
        if ((mb_strlen($usecase) > 20)) {
            throw new \InvalidArgumentException('invalid length for $usecase when calling SMSTenDLCCampaign., must be smaller than or equal to 20.');
        }

        $this->container['usecase'] = $usecase;

        return $this;
    }

    /**
     * Gets sub_usecases
     *
     * @return string[]
     */
    public function getSubUsecases()
    {
        return $this->container['sub_usecases'];
    }

    /**
     * Sets sub_usecases
     *
     * @param string[] $sub_usecases Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases
     *
     * @return self
     */
    public function setSubUsecases($sub_usecases)
    {


        $this->container['sub_usecases'] = $sub_usecases;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Summary description of this campaign.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling SMSTenDLCCampaign., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets embedded_link
     *
     * @return bool|null
     */
    public function getEmbeddedLink()
    {
        return $this->container['embedded_link'];
    }

    /**
     * Sets embedded_link
     *
     * @param bool|null $embedded_link Does message generated by the campaign include URL link in SMS?
     *
     * @return self
     */
    public function setEmbeddedLink($embedded_link)
    {
        $this->container['embedded_link'] = $embedded_link;

        return $this;
    }

    /**
     * Gets embedded_phone
     *
     * @return bool|null
     */
    public function getEmbeddedPhone()
    {
        return $this->container['embedded_phone'];
    }

    /**
     * Sets embedded_phone
     *
     * @param bool|null $embedded_phone Does message generated by the campaign include phone number in SMS?
     *
     * @return self
     */
    public function setEmbeddedPhone($embedded_phone)
    {
        $this->container['embedded_phone'] = $embedded_phone;

        return $this;
    }

    /**
     * Gets affiliate_marketing
     *
     * @return bool|null
     */
    public function getAffiliateMarketing()
    {
        return $this->container['affiliate_marketing'];
    }

    /**
     * Sets affiliate_marketing
     *
     * @param bool|null $affiliate_marketing Does message content controlled by affiliate marketing other than the brand?
     *
     * @return self
     */
    public function setAffiliateMarketing($affiliate_marketing)
    {
        $this->container['affiliate_marketing'] = $affiliate_marketing;

        return $this;
    }

    /**
     * Gets number_pool
     *
     * @return bool|null
     */
    public function getNumberPool()
    {
        return $this->container['number_pool'];
    }

    /**
     * Sets number_pool
     *
     * @param bool|null $number_pool Does campaign utilize pool of phone nubers?
     *
     * @return self
     */
    public function setNumberPool($number_pool)
    {
        $this->container['number_pool'] = $number_pool;

        return $this;
    }

    /**
     * Gets age_gated
     *
     * @return bool|null
     */
    public function getAgeGated()
    {
        return $this->container['age_gated'];
    }

    /**
     * Sets age_gated
     *
     * @param bool|null $age_gated Age gated content in campaign.
     *
     * @return self
     */
    public function setAgeGated($age_gated)
    {
        $this->container['age_gated'] = $age_gated;

        return $this;
    }

    /**
     * Gets direct_lending
     *
     * @return bool|null
     */
    public function getDirectLending()
    {
        return $this->container['direct_lending'];
    }

    /**
     * Sets direct_lending
     *
     * @param bool|null $direct_lending direct_lending
     *
     * @return self
     */
    public function setDirectLending($direct_lending)
    {
        $this->container['direct_lending'] = $direct_lending;

        return $this;
    }

    /**
     * Gets subscriber_optin
     *
     * @return bool|null
     */
    public function getSubscriberOptin()
    {
        return $this->container['subscriber_optin'];
    }

    /**
     * Sets subscriber_optin
     *
     * @param bool|null $subscriber_optin Does campaign require subscriber to opt-in before SMS is sent to subscriber?
     *
     * @return self
     */
    public function setSubscriberOptin($subscriber_optin)
    {
        $this->container['subscriber_optin'] = $subscriber_optin;

        return $this;
    }

    /**
     * Gets subscriber_optout
     *
     * @return bool|null
     */
    public function getSubscriberOptout()
    {
        return $this->container['subscriber_optout'];
    }

    /**
     * Sets subscriber_optout
     *
     * @param bool|null $subscriber_optout Does campaign support subscriber opt-out keyword(s)?
     *
     * @return self
     */
    public function setSubscriberOptout($subscriber_optout)
    {
        $this->container['subscriber_optout'] = $subscriber_optout;

        return $this;
    }

    /**
     * Gets subscriber_help
     *
     * @return bool|null
     */
    public function getSubscriberHelp()
    {
        return $this->container['subscriber_help'];
    }

    /**
     * Sets subscriber_help
     *
     * @param bool|null $subscriber_help Does campaign responds to help keyword(s)?
     *
     * @return self
     */
    public function setSubscriberHelp($subscriber_help)
    {
        $this->container['subscriber_help'] = $subscriber_help;

        return $this;
    }

    /**
     * Gets sample1
     *
     * @return string|null
     */
    public function getSample1()
    {
        return $this->container['sample1'];
    }

    /**
     * Sets sample1
     *
     * @param string|null $sample1 Message sample. Some campaign tiers require 1 or more message samples.
     *
     * @return self
     */
    public function setSample1($sample1)
    {
        if (!is_null($sample1) && (mb_strlen($sample1) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sample1 when calling SMSTenDLCCampaign., must be smaller than or equal to 1024.');
        }

        $this->container['sample1'] = $sample1;

        return $this;
    }

    /**
     * Gets sample2
     *
     * @return string|null
     */
    public function getSample2()
    {
        return $this->container['sample2'];
    }

    /**
     * Sets sample2
     *
     * @param string|null $sample2 Message sample. Some campaign tiers require 2 or more message samples.
     *
     * @return self
     */
    public function setSample2($sample2)
    {
        if (!is_null($sample2) && (mb_strlen($sample2) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sample2 when calling SMSTenDLCCampaign., must be smaller than or equal to 1024.');
        }

        $this->container['sample2'] = $sample2;

        return $this;
    }

    /**
     * Gets sample3
     *
     * @return string|null
     */
    public function getSample3()
    {
        return $this->container['sample3'];
    }

    /**
     * Sets sample3
     *
     * @param string|null $sample3 Message sample. Some campaign tiers require 3 or more message samples.
     *
     * @return self
     */
    public function setSample3($sample3)
    {
        if (!is_null($sample3) && (mb_strlen($sample3) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sample3 when calling SMSTenDLCCampaign., must be smaller than or equal to 1024.');
        }

        $this->container['sample3'] = $sample3;

        return $this;
    }

    /**
     * Gets sample4
     *
     * @return string|null
     */
    public function getSample4()
    {
        return $this->container['sample4'];
    }

    /**
     * Sets sample4
     *
     * @param string|null $sample4 Message sample. Some campaign tiers require 4 or more message samples.
     *
     * @return self
     */
    public function setSample4($sample4)
    {
        if (!is_null($sample4) && (mb_strlen($sample4) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sample4 when calling SMSTenDLCCampaign., must be smaller than or equal to 1024.');
        }

        $this->container['sample4'] = $sample4;

        return $this;
    }

    /**
     * Gets sample5
     *
     * @return string|null
     */
    public function getSample5()
    {
        return $this->container['sample5'];
    }

    /**
     * Sets sample5
     *
     * @param string|null $sample5 Message sample. Some campaign tiers require 5 or more message samples.
     *
     * @return self
     */
    public function setSample5($sample5)
    {
        if (!is_null($sample5) && (mb_strlen($sample5) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $sample5 when calling SMSTenDLCCampaign., must be smaller than or equal to 1024.');
        }

        $this->container['sample5'] = $sample5;

        return $this;
    }

    /**
     * Gets message_flow
     *
     * @return string|null
     */
    public function getMessageFlow()
    {
        return $this->container['message_flow'];
    }

    /**
     * Sets message_flow
     *
     * @param string|null $message_flow Message flow description.
     *
     * @return self
     */
    public function setMessageFlow($message_flow)
    {
        if (!is_null($message_flow) && (mb_strlen($message_flow) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $message_flow when calling SMSTenDLCCampaign., must be smaller than or equal to 2048.');
        }

        $this->container['message_flow'] = $message_flow;

        return $this;
    }

    /**
     * Gets help_message
     *
     * @return string|null
     */
    public function getHelpMessage()
    {
        return $this->container['help_message'];
    }

    /**
     * Sets help_message
     *
     * @param string|null $help_message Help message of the campaign.
     *
     * @return self
     */
    public function setHelpMessage($help_message)
    {
        if (!is_null($help_message) && (mb_strlen($help_message) > 255)) {
            throw new \InvalidArgumentException('invalid length for $help_message when calling SMSTenDLCCampaign., must be smaller than or equal to 255.');
        }

        $this->container['help_message'] = $help_message;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (!is_null($reference_id) && (mb_strlen($reference_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference_id when calling SMSTenDLCCampaign., must be smaller than or equal to 50.');
        }

        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets mock
     *
     * @return bool
     */
    public function getMock()
    {
        return $this->container['mock'];
    }

    /**
     * Sets mock
     *
     * @param bool $mock Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP.
     *
     * @return self
     */
    public function setMock($mock)
    {
        $this->container['mock'] = $mock;

        return $this;
    }

    /**
     * Gets next_renewal_or_expiration_date
     *
     * @return \DateTime|null
     */
    public function getNextRenewalOrExpirationDate()
    {
        return $this->container['next_renewal_or_expiration_date'];
    }

    /**
     * Sets next_renewal_or_expiration_date
     *
     * @param \DateTime|null $next_renewal_or_expiration_date When the campaign would be due for its next renew/bill date.
     *
     * @return self
     */
    public function setNextRenewalOrExpirationDate($next_renewal_or_expiration_date)
    {
        $this->container['next_renewal_or_expiration_date'] = $next_renewal_or_expiration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset) : mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


