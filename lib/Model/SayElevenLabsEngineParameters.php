<?php

/**
 * SayElevenLabsEngineParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FreeClimb\Api\Model;

use \ArrayAccess;
use \FreeClimb\Api\ObjectSerializer;

/**
 * SayElevenLabsEngineParameters Class Doc Comment
 *
 * @category Class
 * @description The parameters to use for the TTS. The complete list of valid values for the parameters attribute is shown below.
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SayElevenLabsEngineParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SayElevenLabsEngineParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'model_id' => 'string',
        'voice_id' => 'string',
        'language_code' => 'string',
        'voice_settings' => '\FreeClimb\Api\Model\SayElevenLabsEngineParametersVoiceSettings',
        'pronunciation_dictionary' => '\FreeClimb\Api\Model\SayElevenLabsEngineParametersPronunciationDictionaryInner[]',
        'seed' => 'int',
        'previous_text' => 'string',
        'next_text' => 'string',
        'previous_request_ids' => 'string[]',
        'next_request_ids' => 'string[]',
        'apply_language_text_normalization' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'model_id' => null,
        'voice_id' => null,
        'language_code' => null,
        'voice_settings' => null,
        'pronunciation_dictionary' => null,
        'seed' => null,
        'previous_text' => null,
        'next_text' => null,
        'previous_request_ids' => null,
        'next_request_ids' => null,
        'apply_language_text_normalization' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'model_id' => false,
        'voice_id' => false,
        'language_code' => false,
        'voice_settings' => false,
        'pronunciation_dictionary' => false,
        'seed' => false,
        'previous_text' => false,
        'next_text' => false,
        'previous_request_ids' => false,
        'next_request_ids' => false,
        'apply_language_text_normalization' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model_id' => 'model_id',
        'voice_id' => 'voice_id',
        'language_code' => 'language_code',
        'voice_settings' => 'voice_settings',
        'pronunciation_dictionary' => 'pronunciation_dictionary',
        'seed' => 'seed',
        'previous_text' => 'previous_text',
        'next_text' => 'next_text',
        'previous_request_ids' => 'previous_request_ids',
        'next_request_ids' => 'next_request_ids',
        'apply_language_text_normalization' => 'apply_language_text_normalization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model_id' => 'setModelId',
        'voice_id' => 'setVoiceId',
        'language_code' => 'setLanguageCode',
        'voice_settings' => 'setVoiceSettings',
        'pronunciation_dictionary' => 'setPronunciationDictionary',
        'seed' => 'setSeed',
        'previous_text' => 'setPreviousText',
        'next_text' => 'setNextText',
        'previous_request_ids' => 'setPreviousRequestIds',
        'next_request_ids' => 'setNextRequestIds',
        'apply_language_text_normalization' => 'setApplyLanguageTextNormalization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model_id' => 'getModelId',
        'voice_id' => 'getVoiceId',
        'language_code' => 'getLanguageCode',
        'voice_settings' => 'getVoiceSettings',
        'pronunciation_dictionary' => 'getPronunciationDictionary',
        'seed' => 'getSeed',
        'previous_text' => 'getPreviousText',
        'next_text' => 'getNextText',
        'previous_request_ids' => 'getPreviousRequestIds',
        'next_request_ids' => 'getNextRequestIds',
        'apply_language_text_normalization' => 'getApplyLanguageTextNormalization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('model_id', $data ?? [], 'eleven_turbo_v2_5');
        $this->setIfExists('voice_id', $data ?? [], null);
        $this->setIfExists('language_code', $data ?? [], 'en');
        $this->setIfExists('voice_settings', $data ?? [], null);
        $this->setIfExists('pronunciation_dictionary', $data ?? [], null);
        $this->setIfExists('seed', $data ?? [], null);
        $this->setIfExists('previous_text', $data ?? [], null);
        $this->setIfExists('next_text', $data ?? [], null);
        $this->setIfExists('previous_request_ids', $data ?? [], null);
        $this->setIfExists('next_request_ids', $data ?? [], null);
        $this->setIfExists('apply_language_text_normalization', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model_id
     *
     * @return string|null
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param string|null $model_id The ID of the ElevenLabs model to use for the TTS. The complete list of valid values for the model_id attribute is shown below.
     *
     * @return self
     */
    public function setModelId($model_id)
    {
        if (is_null($model_id)) {
            throw new \InvalidArgumentException('non-nullable model_id cannot be null');
        }
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets voice_id
     *
     * @return string|null
     */
    public function getVoiceId()
    {
        return $this->container['voice_id'];
    }

    /**
     * Sets voice_id
     *
     * @param string|null $voice_id The ID of the ElevenLabs voice to use for the TTS. The complete list of valid values for the voice_id attribute is shown below.
     *
     * @return self
     */
    public function setVoiceId($voice_id)
    {
        if (is_null($voice_id)) {
            throw new \InvalidArgumentException('non-nullable voice_id cannot be null');
        }
        $this->container['voice_id'] = $voice_id;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code The language code to use for the TTS. The complete list of valid values for the language_code attribute is shown below.
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        if (is_null($language_code)) {
            throw new \InvalidArgumentException('non-nullable language_code cannot be null');
        }
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets voice_settings
     *
     * @return \FreeClimb\Api\Model\SayElevenLabsEngineParametersVoiceSettings|null
     */
    public function getVoiceSettings()
    {
        return $this->container['voice_settings'];
    }

    /**
     * Sets voice_settings
     *
     * @param \FreeClimb\Api\Model\SayElevenLabsEngineParametersVoiceSettings|null $voice_settings voice_settings
     *
     * @return self
     */
    public function setVoiceSettings($voice_settings)
    {
        if (is_null($voice_settings)) {
            throw new \InvalidArgumentException('non-nullable voice_settings cannot be null');
        }
        $this->container['voice_settings'] = $voice_settings;

        return $this;
    }

    /**
     * Gets pronunciation_dictionary
     *
     * @return \FreeClimb\Api\Model\SayElevenLabsEngineParametersPronunciationDictionaryInner[]|null
     */
    public function getPronunciationDictionary()
    {
        return $this->container['pronunciation_dictionary'];
    }

    /**
     * Sets pronunciation_dictionary
     *
     * @param \FreeClimb\Api\Model\SayElevenLabsEngineParametersPronunciationDictionaryInner[]|null $pronunciation_dictionary pronunciation_dictionary
     *
     * @return self
     */
    public function setPronunciationDictionary($pronunciation_dictionary)
    {
        if (is_null($pronunciation_dictionary)) {
            throw new \InvalidArgumentException('non-nullable pronunciation_dictionary cannot be null');
        }
        $this->container['pronunciation_dictionary'] = $pronunciation_dictionary;

        return $this;
    }

    /**
     * Gets seed
     *
     * @return int|null
     */
    public function getSeed()
    {
        return $this->container['seed'];
    }

    /**
     * Sets seed
     *
     * @param int|null $seed seed
     *
     * @return self
     */
    public function setSeed($seed)
    {
        if (is_null($seed)) {
            throw new \InvalidArgumentException('non-nullable seed cannot be null');
        }
        $this->container['seed'] = $seed;

        return $this;
    }

    /**
     * Gets previous_text
     *
     * @return string|null
     */
    public function getPreviousText()
    {
        return $this->container['previous_text'];
    }

    /**
     * Sets previous_text
     *
     * @param string|null $previous_text previous_text
     *
     * @return self
     */
    public function setPreviousText($previous_text)
    {
        if (is_null($previous_text)) {
            throw new \InvalidArgumentException('non-nullable previous_text cannot be null');
        }
        $this->container['previous_text'] = $previous_text;

        return $this;
    }

    /**
     * Gets next_text
     *
     * @return string|null
     */
    public function getNextText()
    {
        return $this->container['next_text'];
    }

    /**
     * Sets next_text
     *
     * @param string|null $next_text next_text
     *
     * @return self
     */
    public function setNextText($next_text)
    {
        if (is_null($next_text)) {
            throw new \InvalidArgumentException('non-nullable next_text cannot be null');
        }
        $this->container['next_text'] = $next_text;

        return $this;
    }

    /**
     * Gets previous_request_ids
     *
     * @return string[]|null
     */
    public function getPreviousRequestIds()
    {
        return $this->container['previous_request_ids'];
    }

    /**
     * Sets previous_request_ids
     *
     * @param string[]|null $previous_request_ids previous_request_ids
     *
     * @return self
     */
    public function setPreviousRequestIds($previous_request_ids)
    {
        if (is_null($previous_request_ids)) {
            throw new \InvalidArgumentException('non-nullable previous_request_ids cannot be null');
        }
        $this->container['previous_request_ids'] = $previous_request_ids;

        return $this;
    }

    /**
     * Gets next_request_ids
     *
     * @return string[]|null
     */
    public function getNextRequestIds()
    {
        return $this->container['next_request_ids'];
    }

    /**
     * Sets next_request_ids
     *
     * @param string[]|null $next_request_ids next_request_ids
     *
     * @return self
     */
    public function setNextRequestIds($next_request_ids)
    {
        if (is_null($next_request_ids)) {
            throw new \InvalidArgumentException('non-nullable next_request_ids cannot be null');
        }
        $this->container['next_request_ids'] = $next_request_ids;

        return $this;
    }

    /**
     * Gets apply_language_text_normalization
     *
     * @return bool|null
     */
    public function getApplyLanguageTextNormalization()
    {
        return $this->container['apply_language_text_normalization'];
    }

    /**
     * Sets apply_language_text_normalization
     *
     * @param bool|null $apply_language_text_normalization apply_language_text_normalization
     *
     * @return self
     */
    public function setApplyLanguageTextNormalization($apply_language_text_normalization)
    {
        if (is_null($apply_language_text_normalization)) {
            throw new \InvalidArgumentException('non-nullable apply_language_text_normalization cannot be null');
        }
        $this->container['apply_language_text_normalization'] = $apply_language_text_normalization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

}


