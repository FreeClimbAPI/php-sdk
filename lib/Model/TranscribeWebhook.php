<?php

/**
 * TranscribeWebhook
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@freeclimb.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FreeClimb\Api\Model;
use \FreeClimb\Api\ObjectSerializer;

/**
 * TranscribeWebhook Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TranscribeWebhook extends Webhook
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TranscribeWebhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_type' => 'string',
        'account_id' => 'string',
        'call_id' => 'string',
        'from' => 'string',
        'to' => 'string',
        'recording_id' => 'string',
        'recording_url' => 'string',
        'recording_size' => 'int',
        'recording_format' => 'string',
        'recording_duration_ms' => 'int',
        'term_reason' => '\FreeClimb\Api\Model\TranscribeTermReason',
        'record_term_reason' => '\FreeClimb\Api\Model\RecordUtteranceTermReason',
        'digit' => 'string',
        'privacy_for_logging' => 'bool',
        'privacy_for_recording' => 'bool',
        'barge_in_reason' => '\FreeClimb\Api\Model\BargeInReason',
        'barged_in_prompt_no' => 'int',
        'barged_in_prompt_ms' => 'int',
        'barged_in_prompt_loop_no' => 'int',
        'barge_in_time_ms' => 'int',
        'transcript' => 'string',
        'transcribe_reason' => '\FreeClimb\Api\Model\TranscribeReason',
        'transcription_duration_ms' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_type' => null,
        'account_id' => null,
        'call_id' => null,
        'from' => null,
        'to' => null,
        'recording_id' => null,
        'recording_url' => 'uri',
        'recording_size' => null,
        'recording_format' => null,
        'recording_duration_ms' => null,
        'term_reason' => null,
        'record_term_reason' => null,
        'digit' => null,
        'privacy_for_logging' => null,
        'privacy_for_recording' => null,
        'barge_in_reason' => null,
        'barged_in_prompt_no' => null,
        'barged_in_prompt_ms' => null,
        'barged_in_prompt_loop_no' => null,
        'barge_in_time_ms' => null,
        'transcript' => null,
        'transcribe_reason' => null,
        'transcription_duration_ms' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_type' => false,
        'account_id' => false,
        'call_id' => false,
        'from' => false,
        'to' => false,
        'recording_id' => true,
        'recording_url' => true,
        'recording_size' => false,
        'recording_format' => true,
        'recording_duration_ms' => false,
        'term_reason' => false,
        'record_term_reason' => false,
        'digit' => true,
        'privacy_for_logging' => false,
        'privacy_for_recording' => false,
        'barge_in_reason' => false,
        'barged_in_prompt_no' => false,
        'barged_in_prompt_ms' => false,
        'barged_in_prompt_loop_no' => false,
        'barge_in_time_ms' => false,
        'transcript' => true,
        'transcribe_reason' => false,
        'transcription_duration_ms' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_type' => 'requestType',
        'account_id' => 'accountId',
        'call_id' => 'callId',
        'from' => 'from',
        'to' => 'to',
        'recording_id' => 'recordingId',
        'recording_url' => 'recordingUrl',
        'recording_size' => 'recordingSize',
        'recording_format' => 'recordingFormat',
        'recording_duration_ms' => 'recordingDurationMs',
        'term_reason' => 'termReason',
        'record_term_reason' => 'recordTermReason',
        'digit' => 'digit',
        'privacy_for_logging' => 'privacyForLogging',
        'privacy_for_recording' => 'privacyForRecording',
        'barge_in_reason' => 'bargeInReason',
        'barged_in_prompt_no' => 'bargedInPromptNo',
        'barged_in_prompt_ms' => 'bargedInPromptMs',
        'barged_in_prompt_loop_no' => 'bargedInPromptLoopNo',
        'barge_in_time_ms' => 'bargeInTimeMs',
        'transcript' => 'transcript',
        'transcribe_reason' => 'transcribeReason',
        'transcription_duration_ms' => 'transcriptionDurationMs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_type' => 'setRequestType',
        'account_id' => 'setAccountId',
        'call_id' => 'setCallId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'recording_id' => 'setRecordingId',
        'recording_url' => 'setRecordingUrl',
        'recording_size' => 'setRecordingSize',
        'recording_format' => 'setRecordingFormat',
        'recording_duration_ms' => 'setRecordingDurationMs',
        'term_reason' => 'setTermReason',
        'record_term_reason' => 'setRecordTermReason',
        'digit' => 'setDigit',
        'privacy_for_logging' => 'setPrivacyForLogging',
        'privacy_for_recording' => 'setPrivacyForRecording',
        'barge_in_reason' => 'setBargeInReason',
        'barged_in_prompt_no' => 'setBargedInPromptNo',
        'barged_in_prompt_ms' => 'setBargedInPromptMs',
        'barged_in_prompt_loop_no' => 'setBargedInPromptLoopNo',
        'barge_in_time_ms' => 'setBargeInTimeMs',
        'transcript' => 'setTranscript',
        'transcribe_reason' => 'setTranscribeReason',
        'transcription_duration_ms' => 'setTranscriptionDurationMs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_type' => 'getRequestType',
        'account_id' => 'getAccountId',
        'call_id' => 'getCallId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'recording_id' => 'getRecordingId',
        'recording_url' => 'getRecordingUrl',
        'recording_size' => 'getRecordingSize',
        'recording_format' => 'getRecordingFormat',
        'recording_duration_ms' => 'getRecordingDurationMs',
        'term_reason' => 'getTermReason',
        'record_term_reason' => 'getRecordTermReason',
        'digit' => 'getDigit',
        'privacy_for_logging' => 'getPrivacyForLogging',
        'privacy_for_recording' => 'getPrivacyForRecording',
        'barge_in_reason' => 'getBargeInReason',
        'barged_in_prompt_no' => 'getBargedInPromptNo',
        'barged_in_prompt_ms' => 'getBargedInPromptMs',
        'barged_in_prompt_loop_no' => 'getBargedInPromptLoopNo',
        'barge_in_time_ms' => 'getBargeInTimeMs',
        'transcript' => 'getTranscript',
        'transcribe_reason' => 'getTranscribeReason',
        'transcription_duration_ms' => 'getTranscriptionDurationMs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('request_type', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('call_id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('recording_id', $data ?? [], null);
        $this->setIfExists('recording_url', $data ?? [], null);
        $this->setIfExists('recording_size', $data ?? [], null);
        $this->setIfExists('recording_format', $data ?? [], null);
        $this->setIfExists('recording_duration_ms', $data ?? [], null);
        $this->setIfExists('term_reason', $data ?? [], null);
        $this->setIfExists('record_term_reason', $data ?? [], null);
        $this->setIfExists('digit', $data ?? [], null);
        $this->setIfExists('privacy_for_logging', $data ?? [], null);
        $this->setIfExists('privacy_for_recording', $data ?? [], null);
        $this->setIfExists('barge_in_reason', $data ?? [], null);
        $this->setIfExists('barged_in_prompt_no', $data ?? [], null);
        $this->setIfExists('barged_in_prompt_ms', $data ?? [], null);
        $this->setIfExists('barged_in_prompt_loop_no', $data ?? [], null);
        $this->setIfExists('barge_in_time_ms', $data ?? [], null);
        $this->setIfExists('transcript', $data ?? [], null);
        $this->setIfExists('transcribe_reason', $data ?? [], null);
        $this->setIfExists('transcription_duration_ms', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_type
     *
     * @return string|null
     */
    public function getRequestType()
    {
        return $this->container['request_type'];
    }

    /**
     * Sets request_type
     *
     * @param string|null $request_type The context or reason why this request is being made. Will be transcribe - The TranscribeUtterance command has completed and its actionUrl is being invoked.
     *
     * @return self
     */
    public function setRequestType($request_type)
    {
        if (is_null($request_type)) {
            throw new \InvalidArgumentException('non-nullable request_type cannot be null');
        }
        $this->container['request_type'] = $request_type;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Account ID associated with your account.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets call_id
     *
     * @return string|null
     */
    public function getCallId()
    {
        return $this->container['call_id'];
    }

    /**
     * Sets call_id
     *
     * @param string|null $call_id Unique identifier for this Call, generated by FreeClimb
     *
     * @return self
     */
    public function setCallId($call_id)
    {
        if (is_null($call_id)) {
            throw new \InvalidArgumentException('non-nullable call_id cannot be null');
        }
        $this->container['call_id'] = $call_id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from Phone number of the party that initiated the Call (in E.164 format).
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Phone number provisioned to the customer and to which this Call is directed (in E.164 format).
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets recording_id
     *
     * @return string|null
     */
    public function getRecordingId()
    {
        return $this->container['recording_id'];
    }

    /**
     * Sets recording_id
     *
     * @param string|null $recording_id The ID of the recording. If no recording was made due to errors or the 'saveRecording' flag being disabled this field will be set to null.
     *
     * @return self
     */
    public function setRecordingId($recording_id)
    {
        if (is_null($recording_id)) {
            array_push($this->openAPINullablesSetToNull, 'recording_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_id', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_id'] = $recording_id;

        return $this;
    }

    /**
     * Gets recording_url
     *
     * @return string|null
     */
    public function getRecordingUrl()
    {
        return $this->container['recording_url'];
    }

    /**
     * Sets recording_url
     *
     * @param string|null $recording_url The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API.
     *
     * @return self
     */
    public function setRecordingUrl($recording_url)
    {
        if (is_null($recording_url)) {
            array_push($this->openAPINullablesSetToNull, 'recording_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_url', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_url'] = $recording_url;

        return $this;
    }

    /**
     * Gets recording_size
     *
     * @return int|null
     */
    public function getRecordingSize()
    {
        return $this->container['recording_size'];
    }

    /**
     * Sets recording_size
     *
     * @param int|null $recording_size The size of the recording in bytes.
     *
     * @return self
     */
    public function setRecordingSize($recording_size)
    {
        if (is_null($recording_size)) {
            throw new \InvalidArgumentException('non-nullable recording_size cannot be null');
        }
        $this->container['recording_size'] = $recording_size;

        return $this;
    }

    /**
     * Gets recording_format
     *
     * @return string|null
     */
    public function getRecordingFormat()
    {
        return $this->container['recording_format'];
    }

    /**
     * Sets recording_format
     *
     * @param string|null $recording_format The media type of the recording.
     *
     * @return self
     */
    public function setRecordingFormat($recording_format)
    {
        if (is_null($recording_format)) {
            array_push($this->openAPINullablesSetToNull, 'recording_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recording_format', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recording_format'] = $recording_format;

        return $this;
    }

    /**
     * Gets recording_duration_ms
     *
     * @return int|null
     */
    public function getRecordingDurationMs()
    {
        return $this->container['recording_duration_ms'];
    }

    /**
     * Sets recording_duration_ms
     *
     * @param int|null $recording_duration_ms The duration of the recorded audio in milliseconds.
     *
     * @return self
     */
    public function setRecordingDurationMs($recording_duration_ms)
    {
        if (is_null($recording_duration_ms)) {
            throw new \InvalidArgumentException('non-nullable recording_duration_ms cannot be null');
        }
        $this->container['recording_duration_ms'] = $recording_duration_ms;

        return $this;
    }

    /**
     * Gets term_reason
     *
     * @return \FreeClimb\Api\Model\TranscribeTermReason|null
     */
    public function getTermReason()
    {
        return $this->container['term_reason'];
    }

    /**
     * Sets term_reason
     *
     * @param \FreeClimb\Api\Model\TranscribeTermReason|null $term_reason term_reason
     *
     * @return self
     */
    public function setTermReason($term_reason)
    {
        if (is_null($term_reason)) {
            throw new \InvalidArgumentException('non-nullable term_reason cannot be null');
        }
        $this->container['term_reason'] = $term_reason;

        return $this;
    }

    /**
     * Gets record_term_reason
     *
     * @return \FreeClimb\Api\Model\RecordUtteranceTermReason|null
     */
    public function getRecordTermReason()
    {
        return $this->container['record_term_reason'];
    }

    /**
     * Sets record_term_reason
     *
     * @param \FreeClimb\Api\Model\RecordUtteranceTermReason|null $record_term_reason record_term_reason
     *
     * @return self
     */
    public function setRecordTermReason($record_term_reason)
    {
        if (is_null($record_term_reason)) {
            throw new \InvalidArgumentException('non-nullable record_term_reason cannot be null');
        }
        $this->container['record_term_reason'] = $record_term_reason;

        return $this;
    }

    /**
     * Gets digit
     *
     * @return string|null
     */
    public function getDigit()
    {
        return $this->container['digit'];
    }

    /**
     * Sets digit
     *
     * @param string|null $digit If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null.
     *
     * @return self
     */
    public function setDigit($digit)
    {
        if (is_null($digit)) {
            array_push($this->openAPINullablesSetToNull, 'digit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('digit', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['digit'] = $digit;

        return $this;
    }

    /**
     * Gets privacy_for_logging
     *
     * @return bool|null
     */
    public function getPrivacyForLogging()
    {
        return $this->container['privacy_for_logging'];
    }

    /**
     * Sets privacy_for_logging
     *
     * @param bool|null $privacy_for_logging Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
     *
     * @return self
     */
    public function setPrivacyForLogging($privacy_for_logging)
    {
        if (is_null($privacy_for_logging)) {
            throw new \InvalidArgumentException('non-nullable privacy_for_logging cannot be null');
        }
        $this->container['privacy_for_logging'] = $privacy_for_logging;

        return $this;
    }

    /**
     * Gets privacy_for_recording
     *
     * @return bool|null
     */
    public function getPrivacyForRecording()
    {
        return $this->container['privacy_for_recording'];
    }

    /**
     * Sets privacy_for_recording
     *
     * @param bool|null $privacy_for_recording Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
     *
     * @return self
     */
    public function setPrivacyForRecording($privacy_for_recording)
    {
        if (is_null($privacy_for_recording)) {
            throw new \InvalidArgumentException('non-nullable privacy_for_recording cannot be null');
        }
        $this->container['privacy_for_recording'] = $privacy_for_recording;

        return $this;
    }

    /**
     * Gets barge_in_reason
     *
     * @return \FreeClimb\Api\Model\BargeInReason|null
     */
    public function getBargeInReason()
    {
        return $this->container['barge_in_reason'];
    }

    /**
     * Sets barge_in_reason
     *
     * @param \FreeClimb\Api\Model\BargeInReason|null $barge_in_reason barge_in_reason
     *
     * @return self
     */
    public function setBargeInReason($barge_in_reason)
    {
        if (is_null($barge_in_reason)) {
            throw new \InvalidArgumentException('non-nullable barge_in_reason cannot be null');
        }
        $this->container['barge_in_reason'] = $barge_in_reason;

        return $this;
    }

    /**
     * Gets barged_in_prompt_no
     *
     * @return int|null
     */
    public function getBargedInPromptNo()
    {
        return $this->container['barged_in_prompt_no'];
    }

    /**
     * Sets barged_in_prompt_no
     *
     * @param int|null $barged_in_prompt_no barged_in_prompt_no
     *
     * @return self
     */
    public function setBargedInPromptNo($barged_in_prompt_no)
    {
        if (is_null($barged_in_prompt_no)) {
            throw new \InvalidArgumentException('non-nullable barged_in_prompt_no cannot be null');
        }
        $this->container['barged_in_prompt_no'] = $barged_in_prompt_no;

        return $this;
    }

    /**
     * Gets barged_in_prompt_ms
     *
     * @return int|null
     */
    public function getBargedInPromptMs()
    {
        return $this->container['barged_in_prompt_ms'];
    }

    /**
     * Sets barged_in_prompt_ms
     *
     * @param int|null $barged_in_prompt_ms duration in ms bargedInPromptNo prompt was executing until barge-in occurred.
     *
     * @return self
     */
    public function setBargedInPromptMs($barged_in_prompt_ms)
    {
        if (is_null($barged_in_prompt_ms)) {
            throw new \InvalidArgumentException('non-nullable barged_in_prompt_ms cannot be null');
        }
        $this->container['barged_in_prompt_ms'] = $barged_in_prompt_ms;

        return $this;
    }

    /**
     * Gets barged_in_prompt_loop_no
     *
     * @return int|null
     */
    public function getBargedInPromptLoopNo()
    {
        return $this->container['barged_in_prompt_loop_no'];
    }

    /**
     * Sets barged_in_prompt_loop_no
     *
     * @param int|null $barged_in_prompt_loop_no barged_in_prompt_loop_no
     *
     * @return self
     */
    public function setBargedInPromptLoopNo($barged_in_prompt_loop_no)
    {
        if (is_null($barged_in_prompt_loop_no)) {
            throw new \InvalidArgumentException('non-nullable barged_in_prompt_loop_no cannot be null');
        }
        $this->container['barged_in_prompt_loop_no'] = $barged_in_prompt_loop_no;

        return $this;
    }

    /**
     * Gets barge_in_time_ms
     *
     * @return int|null
     */
    public function getBargeInTimeMs()
    {
        return $this->container['barge_in_time_ms'];
    }

    /**
     * Sets barge_in_time_ms
     *
     * @param int|null $barge_in_time_ms epoch time in ms
     *
     * @return self
     */
    public function setBargeInTimeMs($barge_in_time_ms)
    {
        if (is_null($barge_in_time_ms)) {
            throw new \InvalidArgumentException('non-nullable barge_in_time_ms cannot be null');
        }
        $this->container['barge_in_time_ms'] = $barge_in_time_ms;

        return $this;
    }

    /**
     * Gets transcript
     *
     * @return string|null
     */
    public function getTranscript()
    {
        return $this->container['transcript'];
    }

    /**
     * Sets transcript
     *
     * @param string|null $transcript Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason.
     *
     * @return self
     */
    public function setTranscript($transcript)
    {
        if (is_null($transcript)) {
            array_push($this->openAPINullablesSetToNull, 'transcript');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcript', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transcript'] = $transcript;

        return $this;
    }

    /**
     * Gets transcribe_reason
     *
     * @return \FreeClimb\Api\Model\TranscribeReason|null
     */
    public function getTranscribeReason()
    {
        return $this->container['transcribe_reason'];
    }

    /**
     * Sets transcribe_reason
     *
     * @param \FreeClimb\Api\Model\TranscribeReason|null $transcribe_reason transcribe_reason
     *
     * @return self
     */
    public function setTranscribeReason($transcribe_reason)
    {
        if (is_null($transcribe_reason)) {
            throw new \InvalidArgumentException('non-nullable transcribe_reason cannot be null');
        }
        $this->container['transcribe_reason'] = $transcribe_reason;

        return $this;
    }

    /**
     * Gets transcription_duration_ms
     *
     * @return int|null
     */
    public function getTranscriptionDurationMs()
    {
        return $this->container['transcription_duration_ms'];
    }

    /**
     * Sets transcription_duration_ms
     *
     * @param int|null $transcription_duration_ms The duration of the audio being transcribed in milliseconds
     *
     * @return self
     */
    public function setTranscriptionDurationMs($transcription_duration_ms)
    {
        if (is_null($transcription_duration_ms)) {
            throw new \InvalidArgumentException('non-nullable transcription_duration_ms cannot be null');
        }
        $this->container['transcription_duration_ms'] = $transcription_duration_ms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function deserialize(string $payload)
    {
        $content = json_decode($payload, false, 512, JSON_THROW_ON_ERROR);
        return ObjectSerializer::deserialize($content, '\FreeClimb\Api\Model\TranscribeWebhook', []);
    }
}


