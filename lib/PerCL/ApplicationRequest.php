<?php

/**
 * ApplicationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  FreeClimb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FreeClimb API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FreeClimb\PerCL;

use \ArrayAccess;
use \FreeClimb\ObjectSerializer;

/**
 * ApplicationRequest Class Doc Comment
 *
 * @category Class
 * @package  FreeClimb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationRequest implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplicationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alias' => 'string',
        'voice_url' => 'string',
        'voice_fallback_url' => 'string',
        'call_connect_url' => 'string',
        'status_callback_url' => 'string',
        'sms_url' => 'string',
        'sms_fallback_url' => 'string',
        'request_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'alias' => null,
        'voice_url' => null,
        'voice_fallback_url' => null,
        'call_connect_url' => null,
        'status_callback_url' => null,
        'sms_url' => null,
        'sms_fallback_url' => null,
        'request_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'voice_url' => 'voiceUrl',
        'voice_fallback_url' => 'voiceFallbackUrl',
        'call_connect_url' => 'callConnectUrl',
        'status_callback_url' => 'statusCallbackUrl',
        'sms_url' => 'smsUrl',
        'sms_fallback_url' => 'smsFallbackUrl',
        'request_id' => 'requestId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'voice_url' => 'setVoiceUrl',
        'voice_fallback_url' => 'setVoiceFallbackUrl',
        'call_connect_url' => 'setCallConnectUrl',
        'status_callback_url' => 'setStatusCallbackUrl',
        'sms_url' => 'setSmsUrl',
        'sms_fallback_url' => 'setSmsFallbackUrl',
        'request_id' => 'setRequestId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'voice_url' => 'getVoiceUrl',
        'voice_fallback_url' => 'getVoiceFallbackUrl',
        'call_connect_url' => 'getCallConnectUrl',
        'status_callback_url' => 'getStatusCallbackUrl',
        'sms_url' => 'getSmsUrl',
        'sms_fallback_url' => 'getSmsFallbackUrl',
        'request_id' => 'getRequestId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['voice_url'] = isset($data['voice_url']) ? $data['voice_url'] : null;
        $this->container['voice_fallback_url'] = isset($data['voice_fallback_url']) ? $data['voice_fallback_url'] : null;
        $this->container['call_connect_url'] = isset($data['call_connect_url']) ? $data['call_connect_url'] : null;
        $this->container['status_callback_url'] = isset($data['status_callback_url']) ? $data['status_callback_url'] : null;
        $this->container['sms_url'] = isset($data['sms_url']) ? $data['sms_url'] : null;
        $this->container['sms_fallback_url'] = isset($data['sms_fallback_url']) ? $data['sms_fallback_url'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias A human readable description of the application, with maximum length 64 characters.
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets voice_url
     *
     * @return string|null
     */
    public function getVoiceUrl()
    {
        return $this->container['voice_url'];
    }

    /**
     * Sets voice_url
     *
     * @param string|null $voice_url The URL that FreeClimb will request when an inbound call arrives on a phone number assigned to this application. Used only for inbound calls.
     *
     * @return $this
     */
    public function setVoiceUrl($voice_url)
    {
        $this->container['voice_url'] = $voice_url;

        return $this;
    }

    /**
     * Gets voice_fallback_url
     *
     * @return string|null
     */
    public function getVoiceFallbackUrl()
    {
        return $this->container['voice_fallback_url'];
    }

    /**
     * Sets voice_fallback_url
     *
     * @param string|null $voice_fallback_url The URL that FreeClimb will request if it times out waiting for a response from the voiceUrl. Used for inbound calls only. Note: A PerCL response is expected to control the inbound call.
     *
     * @return $this
     */
    public function setVoiceFallbackUrl($voice_fallback_url)
    {
        $this->container['voice_fallback_url'] = $voice_fallback_url;

        return $this;
    }

    /**
     * Gets call_connect_url
     *
     * @return string|null
     */
    public function getCallConnectUrl()
    {
        return $this->container['call_connect_url'];
    }

    /**
     * Sets call_connect_url
     *
     * @param string|null $call_connect_url The URL that FreeClimb will request when an outbound call request is complete. Used for outbound calls only.  Note: A PerCL response is expected if the outbound call is connected (status=InProgress) to control the call.
     *
     * @return $this
     */
    public function setCallConnectUrl($call_connect_url)
    {
        $this->container['call_connect_url'] = $call_connect_url;

        return $this;
    }

    /**
     * Gets status_callback_url
     *
     * @return string|null
     */
    public function getStatusCallbackUrl()
    {
        return $this->container['status_callback_url'];
    }

    /**
     * Sets status_callback_url
     *
     * @param string|null $status_callback_url The URL that FreeClimb will request to pass call status (such as call ended) to the application.  Note: This is a notification only; any PerCL returned will be ignored.
     *
     * @return $this
     */
    public function setStatusCallbackUrl($status_callback_url)
    {
        $this->container['status_callback_url'] = $status_callback_url;

        return $this;
    }

    /**
     * Gets sms_url
     *
     * @return string|null
     */
    public function getSmsUrl()
    {
        return $this->container['sms_url'];
    }

    /**
     * Sets sms_url
     *
     * @param string|null $sms_url The URL that FreeClimb will request when a phone number assigned to this application receives an incoming SMS message. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.
     *
     * @return $this
     */
    public function setSmsUrl($sms_url)
    {
        $this->container['sms_url'] = $sms_url;

        return $this;
    }

    /**
     * Gets sms_fallback_url
     *
     * @return string|null
     */
    public function getSmsFallbackUrl()
    {
        return $this->container['sms_fallback_url'];
    }

    /**
     * Sets sms_fallback_url
     *
     * @param string|null $sms_fallback_url The URL that FreeClimb will request if it times out waiting for a response from the smsUrl. Used for inbound SMS only.  Note: Any PerCL returned will be ignored.
     *
     * @return $this
     */
    public function setSmsFallbackUrl($sms_fallback_url)
    {
        $this->container['sms_fallback_url'] = $sms_fallback_url;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id The requestId for this request starting with prefix \"RQ\" followed by 40 hexadecimal characters. FreeClimb logs generated while processing this request will include this requestId. If it is not provided, FreeClimb will generate a requestId and return it as a header in the response, e.g. X-Pulse-Request-Id: <requestId>
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


